# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - startup
  - build
  - short_runs
  - cleanup

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none
  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
# =================================================================================================================================

# =================================================================================================================================
# TEMPLATE DEFINITIONS
# =================================================================================================================================
# NOTE: _ipp is the runner testimony_fluxo , with tag: vm_linux

.tmpl_IPP_global: &IPP_global
  tags:
    - vm_linux

.tmpl_IPP_setup_intel: &IPP_setup_intel
  <<: *IPP_global
  before_script:
    - . ~/environments/modules_for_gvec_intel ; pwd
    - export OMP_NUM_THREADS=2

.tmpl_IPP_setup_intel_debug: &IPP_setup_intel_debug
  variables:
    RUNNERNAME: IPP
    CURR_CMP: intel
    CMP_MODE: Debug
  <<: *IPP_setup_intel

.tmpl_IPP_setup_intel_build_debug: &IPP_setup_intel_build_debug
  variables:
    RUNNERNAME: IPP
    CURR_CMP: intel
    CMP_MODE: Debug
    GIT_STRATEGY: clone
  <<: *IPP_setup_intel

.tmpl_IPP_setup_intel_release: &IPP_setup_intel_release
  variables:
    RUNNERNAME: IPP
    CURR_CMP: intel
    CMP_MODE: Release
  <<: *IPP_setup_intel

.tmpl_IPP_setup_intel_build_release: &IPP_setup_intel_build_release
  variables:
    RUNNERNAME: IPP
    CURR_CMP: intel
    CMP_MODE: Release
    GIT_STRATEGY: clone
  <<: *IPP_setup_intel

.tmpl_IPP_setup_gnu: &IPP_setup_gnu
  <<: *IPP_global
  before_script:
    - . ~/environments/modules_for_gvec_gnu ; pwd
    - export OMP_NUM_THREADS=2

.tmpl_IPP_setup_gnu_debug: &IPP_setup_gnu_debug
  variables:
    RUNNERNAME: IPP
    CURR_CMP: gnu
    CMP_MODE: Debug
  <<: *IPP_setup_gnu

.tmpl_IPP_setup_gnu_build_debug: &IPP_setup_gnu_build_debug
  variables:
    RUNNERNAME: IPP
    CURR_CMP: gnu
    CMP_MODE: Debug
    GIT_STRATEGY: clone
  <<: *IPP_setup_gnu

.tmpl_IPP_setup_gnu_release: &IPP_setup_gnu_release
  variables:
    RUNNERNAME: IPP
    CURR_CMP: gnu
    CMP_MODE: Release
  <<: *IPP_setup_gnu

.tmpl_IPP_setup_gnu_build_release: &IPP_setup_gnu_build_release
  variables:
    RUNNERNAME: IPP
    CURR_CMP: gnu
    CMP_MODE: Release
    GIT_STRATEGY: clone
  <<: *IPP_setup_gnu


# =================================================================================================================================
# TEMPLATES FOR STAGE "startup"
# =================================================================================================================================

.tmpl_script_startup: &script_startup
  stage: startup
  script:
    - echo ${RUNNERNAME} "RUNNER WARM-UP"
    - echo "create" ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}
    - mkdir -p ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}

# =================================================================================================================================
# TEMPLATES FOR STAGE "build"
# =================================================================================================================================

.tmpl_common_arts:
  artifacts: &common_arts
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure

# -------------------------------------------------------------------------------------------------------------------------------
.tmpl_script_build: &script_build
  stage: build
  script:
    - rm -rf build_${CURR_CMP}_${CMP_MODE} ; mkdir -p build_${CURR_CMP}_${CMP_MODE}
    - cd build_${CURR_CMP}_${CMP_MODE}; pwd
    - cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DCOMPILE_GVEC_TO_CASTOR3D=ON -DCOMPILE_GVEC_TO_GENE=ON -DCOMPILE_GVEC_TO_HOPR=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=ON  ../. |tee ../log_build_${CURR_CMP}_${CMP_MODE}.cmake 
    - make -j |tee ../log_build_${CURR_CMP}_${CMP_MODE}.make
    - cd .. ; mv build_${CURR_CMP}_${CMP_MODE} ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}/. 
  artifacts:
    <<: *common_arts
    paths:
    - log_build_${CURR_CMP}_${CMP_MODE}.* 


# =================================================================================================================================
# TEMPLATES FOR STAGE "short_runs"
# =================================================================================================================================

# -------------------------------------------------------------------------------------------------------------------------------
.tmpl_script_short_runs: &script_short_runs
  stage: short_runs
  script:
    - rm -rf build_${CURR_CMP}_${CMP_MODE}; mv ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}/build_${CURR_CMP}_${CMP_MODE} .
    - rm -rf shortruns_${CURR_CMP}_${CMP_MODE} ; mkdir -p shortruns_${CURR_CMP}_${CMP_MODE}
    - python gitlab_shortruns.py -execdir shortruns_${CURR_CMP}_${CMP_MODE} build_${CURR_CMP}_${CMP_MODE} |tee ../log_shortruns_${CURR_CMP}_${CMP_MODE}
    - rm -rf build_${CURR_CMP}_${CMP_MODE}
    - cd .. ; mv shortruns_${CURR_CMP}_${CMP_MODE} ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}/.
  artifacts:
    <<: *common_arts
    paths:
    - log_shortruns_${CURR_CMP}_${CMP_MODE}

# =================================================================================================================================
# TEMPLATES FOR STAGE "cleanup"
# =================================================================================================================================

.tmpl_script_cleanup: &script_cleanup
  stage: cleanup
  when: always
  script:
    - pwd
    - echo "on" ${RUNNERNAME} "RUNNER"
    - echo "remove:" ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}
    - rm -rf ${GLOBAL_CACHE_PATH}_${CURR_CMP}_${CMP_MODE}

# #################################################################################################################################
# JOB DEFINITIONS
# HERE, the "needs:" command is used to generate a dependency for each job.
#                    - the startup job does nothing except checking if the gitlab runner is listening.
#                    - this way, all the remainingjobs can be executed only in their dependency order,
#                      and thus before the whole stage is ready (even jump over stages)
# #################################################################################################################################

# =================================================================================================================================
# Stage "startup"
# =================================================================================================================================

IPP_intel_debug_startup:
  <<: *IPP_setup_intel_debug
  <<: *script_startup

IPP_intel_release_startup:
  <<: *IPP_setup_intel_release
  <<: *script_startup

IPP_gnu_debug_startup:
  <<: *IPP_setup_gnu_debug
  <<: *script_startup

IPP_gnu_release_startup:
  <<: *IPP_setup_gnu_release
  <<: *script_startup

# =================================================================================================================================
# Stage "build"
# =================================================================================================================================

IPP_intel_build_debug:
  needs: ["IPP_intel_debug_startup"]
  <<: *IPP_setup_intel_build_debug
  <<: *script_build

IPP_intel_build_release:
  needs: ["IPP_intel_release_startup"]
  <<: *IPP_setup_intel_build_release
  <<: *script_build

IPP_gnu_build_debug:
  needs: ["IPP_gnu_debug_startup"]
  <<: *IPP_setup_gnu_build_debug
  <<: *script_build

IPP_gnu_build_release:
  needs: ["IPP_gnu_release_startup"]
  <<: *IPP_setup_gnu_build_release
  <<: *script_build


# =================================================================================================================================
# Stage "short_runs"
# =================================================================================================================================

IPP_intel_debug_short_runs:
  needs: ["IPP_intel_build_debug"]
  <<: *IPP_setup_intel_debug
  <<: *script_short_runs

IPP_intel_release_short_runs:
  needs: ["IPP_intel_build_release"]
  <<: *IPP_setup_intel_release
  <<: *script_short_runs

IPP_gnu_debug_short_runs:
  needs: ["IPP_gnu_build_debug"]
  <<: *IPP_setup_gnu_debug
  <<: *script_short_runs

IPP_gnu_release_short_runs:
  needs: ["IPP_gnu_build_release"]
  <<: *IPP_setup_gnu_release
  <<: *script_short_runs

# =================================================================================================================================
# Stage "cleanup"
# =================================================================================================================================
IPP_intel_debug_cleanup_cache:
  needs: ["IPP_intel_debug_short_runs"]
  <<: *IPP_setup_intel_debug
  <<: *script_cleanup

IPP_intel_release_cleanup_cache:
  needs: ["IPP_intel_release_short_runs"]
  <<: *IPP_setup_intel_release
  <<: *script_cleanup

IPP_gnu_debug_cleanup_cache:
  needs: ["IPP_gnu_debug_short_runs"]
  <<: *IPP_setup_gnu_debug
  <<: *script_cleanup

IPP_gnu_release_cleanup_cache:
  needs: ["IPP_gnu_release_short_runs"]
  <<: *IPP_setup_gnu_release
  <<: *script_cleanup



