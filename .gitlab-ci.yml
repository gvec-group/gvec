# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - env
  - build
  - run

workflow:
  name: 'Pipeline for branch: $CI_COMMIT_BRANCH'

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none
#  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
#
# => SCIPT SYNTAX CAN BE CHECKED ON GITLAB with the "CI LINT" tool
#
# =================================================================================================================================

# =================================================================================================================================
# TEMPLATES FOR STAGE "env" (printout the enviroment for future reference)
# =================================================================================================================================

# MPCDF testimonytwo runner
.tmpl_MPCDF_testimony:
  tags:
    - vm_linux

# MPCDF shared runner
.tmpl_MPCDF_shared:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/module-image
  tags:
    - shared

.tmpl_printout_env:
  script:
    - echo "Pipeline environment for branch:" $CI_COMMIT_BRANCH
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - printenv
    - module avail
    - module list
    - echo $OMP_NUM_THREADS

# MPCDF shared runner
.tmpl_MPCDF_shared_setup:
  extends: .tmpl_MPCDF_shared
  before_script:
    - . ./CI_setup/MPCDF_setup_${CURR_CMP}
    - export OMP_NUM_THREADS=2

# MPCDF testimonytwo runner
.tmpl_MPCDF_testimony_setup:
  extends: .tmpl_MPCDF_testimony
  before_script:
    - . ./CI_setup/MPCDF_setup_${CURR_CMP}
    - export OMP_NUM_THREADS=2

.cmp_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug", "Release"]
        OMP_MODE: ["ompOFF", "ompON"]
        MPI_MODE: ["mpiOFF", "mpiON"]
#        MPI_MODE: "mpiOFF"
#        MPI_RNKS: "0"
#      - CMP_MODE: ["Debug"]
#        OMP_MODE: ["ompOFF"]
#        MPI_MODE: "mpiON"
#        MPI_RNKS: ["1","2","4"]
  variables:
#    BUILDNAME:
#      value: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
#      expand: true
    BUILDNAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
#    CASENAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}_nranks${MPI_RNKS}

.run_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF"]
        MPI_MODE: "mpiON"
        MPI_RNKS: ["1","2","4"]
  variables:
#    BUILDNAME:
#      value: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
#      expand: true
    BUILDNAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}_nranks${MPI_RNKS}


.tmpl_setup_build_and_run_intel:
  extends:
    - .cmp_vars_matrix
  variables:
    CURR_CMP: "intel"
    GIT_STRATEGY: clone
#  parallel: !reference [.cmp_vars_matrix,parallel]

.tmpl_setup_build_and_run_gnu:
  extends:
    - .cmp_vars_matrix
  variables:
    CURR_CMP: "gnu"
    GIT_STRATEGY: clone
#  parallel: !reference [.cmp_vars_matrix,parallel]

.tmpl_setup_run_gnu:
  extends:
    - .run_vars_matrix
  variables:
    CURR_CMP: "gnu"
    GIT_STRATEGY: clone
#  parallel: !reference [.cmp_vars_matrix,parallel]

# =================================================================================================================================
# TEMPLATE FOR STAGE "build"
# =================================================================================================================================

.tmpl_script_build:
  script:
    - pwd
    - echo "Building with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "BUILDNAME is ${BUILDNAME}"
    - rm -rf build_${BUILDNAME}; mkdir -p build_${BUILDNAME}
    - cd build_${BUILDNAME}; pwd
    #- cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DCOMPILE_GVEC_TO_CASTOR3D=ON -DCOMPILE_GVEC_TO_GENE=ON -DCOMPILE_GVEC_TO_JOREK=ON -DCOMPILE_GVEC_TO_HOPR=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE} ../. |tee ../log_${BUILDNAME}_cmake.txt
    # only compile gvec
    - cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE} ../. |tee ../log_${BUILDNAME}_cmake.txt
    - make -j |tee ../log_${BUILDNAME}_make.txt
    - cd ..; echo "... BUILD PHASE FINISHED!"
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    paths:
      - build_${BUILDNAME}
      - log_${BUILDNAME}_*.txt 
    expire_in: 1 week
    when: always
#    when: on_failure

# =================================================================================================================================
# TEMPLATE FOR STAGE "run"
# =================================================================================================================================

.tmpl_script_run:
  script:
    - pwd
    - rm -rf shortruns_${CASENAME}; mkdir -p shortruns_${CASENAME}
    - echo "BUILDNAME is ${BUILDNAME} >> build_${BUILDNAME}/"
    - echo "CASENAME is ${CASENAME} >> shortruns_${CASENAME}/"
    - echo "Running with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    #- python gitlab_shortruns.py -execdir shortruns_${CASENAME} build_${CASENAME} |tee log_${CASENAME}_shortruns.txt
    # only execute case 1 for now...
    - python gitlab_shortruns.py -case 1 -execdir shortruns_${CASENAME} build_${BUILDNAME} |tee log_${CASENAME}_shortruns.txt
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    paths:
      - shortruns_${CASENAME}
      - log_${CASENAME}_*.txt 
    expire_in: 1 week
    when: always
#    when: on_failure


# =================================================================================================================================
# Stage "env"
# =================================================================================================================================

# printout MPCDF shared runner environment
MPCDF_shared_env:
  stage: env
  extends:
    - .tmpl_MPCDF_shared
    - .tmpl_printout_env
#  needs: [] # set the job to start as soon as the pipeline is created

## printout MPCDF testimonytwo runner environment
#MPCDF_testimony_env:
#  stage: env
#  extends:
#    - .tmpl_MPCDF_testimony
#    - .tmpl_printout_env

# =================================================================================================================================
# Stage "build"
# =================================================================================================================================

## build with Intel on MPCDF shared runner
#MPCDF_shared_build_intel:
#  stage: build
#  extends:
#    - .tmpl_MPCDF_shared_setup
#    - .tmpl_setup_build_and_run_intel
#    - .tmpl_script_build

# build with GNU on MPCDF shared runner
MPCDF_shared_build_gnu:
  stage: build
  extends:
    - .tmpl_MPCDF_shared_setup
    - .tmpl_setup_build_and_run_gnu
    - .tmpl_script_build

## build with Intel on MPCDF testimonytwo runner
#MPCDF_testimony_build_intel:
#  stage: build
#  extends:
#    - .tmpl_MPCDF_testimony_setup
#    - .tmpl_setup_build_and_run_intel
#    - .tmpl_script_build

## build with GNU on MPCDF testimonytwo runner
#MPCDF_testimony_build_gnu:
#  stage: build
#  extends:
#    - .tmpl_MPCDF_testimony_setup
#    - .tmpl_setup_build_and_run_gnu
#    - .tmpl_script_build

# =================================================================================================================================
# Stage "run"
# =================================================================================================================================

## run with Intel on MPCDF shared runner
#MPCDF_shared_run_intel:
#  stage: run
#  needs:
#    - job: MPCDF_shared_build_intel
#      artifacts: true
#  extends:
#    - .tmpl_MPCDF_shared_setup
#    - .tmpl_setup_build_and_run_intel
#    - .tmpl_script_run

# run with GNU on MPCDF shared runner
MPCDF_shared_run_gnu:
  stage: run
  needs:
    - job: MPCDF_shared_build_gnu
      artifacts: true
  extends:
    - .tmpl_MPCDF_shared_setup
#    - .tmpl_setup_build_and_run_gnu
    - .tmpl_setup_run_gnu
    - .tmpl_script_run

## run with Intel on MPCDF testimonytwo runner
#MPCDF_testimony_run_intel:
#  stage: run
#  needs:
#    - job: MPCDF_testimony_build_intel
#      artifacts: true
#  extends:
#    - .tmpl_MPCDF_testimony_setup
#    - .tmpl_setup_build_and_run_intel
#    - .tmpl_script_run

## run with GNU on MPCDF testimonytwo runner
#MPCDF_testimony_run_gnu:
#  stage: run
#  needs:
#    - job: MPCDF_testimony_build_gnu
#      artifacts: true
#  extends:
#    - .tmpl_MPCDF_testimony_setup
#    - .tmpl_setup_build_and_run_gnu
#    - .tmpl_script_run
