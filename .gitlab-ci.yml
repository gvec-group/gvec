# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - build_debug
  - short_runs

# global paths to be kept between jobs
cache:
  paths:
  - build_debug_intel

# =================================================================================================================================
# Stage "build"
# v>9 artifacts: name: "${CI_PIPELINE_ID}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
#
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script. 
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
# =================================================================================================================================
build_debug_intel:
  stage: build_debug 
  tags:
    - vm_linux
  only:
    - master
  before_script:
    - . ~/environments/modules_for_gvec_intel
  script: 
    - rm -rf build_debug_intel ; mkdir build_debug_intel
    - cd build_debug_intel; pwd
    - cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=Debug -DBUILD_NETCDF=ON ../. 
    - make -j
  after_script:
    - pwd 
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - build_debug_intel

build_debug_gnu:
  stage: build_debug 
  tags:
    - vm_linux
  only:
    - master
  before_script:
    - . ~/environments/modules_for_gvec_gnu
  script: 
    - rm -rf build_debug_gnu ; mkdir build_debug_gnu
    - cd build_debug_gnu; pwd
    - cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=Debug -DBUILD_NETCDF=ON ../. 
    - make -j
  after_script:
    - pwd 
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - build_debug_gnu


# =================================================================================================================================
# Stage "short_runs"
# =================================================================================================================================
short_runs_iniparam_intel:
  stage: short_runs
  tags:
    - vm_linux
  only:
    - master
  before_script:
    - . ~/environments/modules_for_gvec_intel
  script: 
    - pwd
    - python gitlab_shortruns.py "build_debug_intel" |tee log
  after_script:
    - pwd 
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - ini/*

short_runs_iniparam_gnu:
  stage: short_runs
  tags:
    - vm_linux
  only:
    - master
  before_script:
    - . ~/environments/modules_for_gvec_gnu
  script: 
    - pwd
    - python gitlab_shortruns.py "build_debug_gnu" |tee log
  after_script:
    - pwd 
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - ini/*


