# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - env
  - build
  - run
  - regression
  - postprocessing

workflow:
  name: 'Pipeline for branch $CI_COMMIT_REF_NAME and tag $HASH_TAG_RELEASE'
  rules:
    # disable the pipeline for merge requests (to avoid duplicate pipelines)
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    # otherwise always run the pipeline (e.g. on every push)
    - when: always

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: fetch
  HASH_TAG: $CI_COMMIT_REF_NAME
  HASH_TAG_RELEASE: v0.2.2-mpi_par  # pipeline schedules
  NIGHTLY_PIPELINE: "false"         # pipeline schedules
  PYTEST_EXEC_CMD: "python -m pytest -v -rA --tb=short"
  # global defaults for the pytest -m and -k options (can be reassigned at the job level!)
  PYTEST_MARKER_OPTS: "example"
  PYTEST_KEY_OPTS: ""               # default value
  PYTEST_EXTRA_OPTS: ""

#  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
#
# => SCIPT SYNTAX CAN BE CHECKED ON GITLAB with the "CI LINT" tool
#
# =================================================================================================================================

# =================================================================================================================================
# ISSUE FOUND WITH PARALLEL MATRICES
# =================================================================================================================================

#  parallel:
#    matrix:
#      - CMP_MODE: ["Debug"]
#        OMP_MODE: ["ompON"] #only one element/variable in matrix: causes CI dependency line to break
#                             check issue report: https://gitlab.com/gitlab-org/gitlab/-/issues/428679
#                             workaround is to use the keyword "variables:" instead (like below)
#  variables:
#    HASH_TAG: ${HASH_TAG_RELEASE}
#    CMP_MODE: "Debug"
#    OMP_MODE: "ompON"


# =================================================================================================================================
# INCLUDE TEMPLATES & JOBS 
# =================================================================================================================================

include:
  # ============================
  # script templates
  # ============================
  - local: CI_templates/scripts.yml

  # ============================
  # environment jobs
  # ============================
  - local: CI_templates/env.yml
    inputs:
      env: .mpcdfci_intel2023
      rules: .rules_minimal
  
  - local: CI_templates/env.yml
    inputs:
      env: .mpcdfci_gcc13

  - local: CI_templates/env.yml
    inputs:
      env: .mpcdfci_nvhpc23

  # MPI
  - local: CI_templates/env.yml
    inputs:
      env: .mpcdfci_intel_impi_latest
      rules: .rules_minimal

  - local: CI_templates/env.yml
    inputs:
      env: .mpcdfci_gcc_openmpi_latest

  # ============================
  # build jobs
  # ============================
  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_intel2023
      rules: .rules_minimal

  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_gcc13

  # MPI
  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_intel_impi_latest
      vars: .vars_matrix_mpi_build
      cmake-opts: .cmake_mpi_opts
      rules: .rules_minimal

  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_gcc_openmpi_latest
      vars: .vars_matrix_mpi_build
      cmake-opts: .cmake_mpi_opts

  # converter-only
  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_intel2023
      build-postfix: _only_converter
      cmake-opts: .cmake_only_converter

  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_gcc13
      build-postfix: _only_converter
      cmake-opts: .cmake_only_converter

  # release tag
  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_intel2023
      build-postfix: _tag
      vars: .vars_matrix_build_tag

  # release tag + MPI
  - local: CI_templates/build.yml
    inputs:
      env: .mpcdfci_intel_impi_latest
      build-postfix: _tag
      vars: .vars_matrix_mpi_build_tag
      cmake-opts: .cmake_mpi_opts

  # ============================
  # run jobs
  # ============================
  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_intel2023
      rules: .rules_minimal

  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_gcc13

  # debugrun
  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_intel2023
      run-postfix: _debugrun
      vars: .vars_matrix_run_debugrun
      rules: .rules_nightly

  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_gcc13
      run-postfix: _debugrun
      vars: .vars_matrix_run_debugrun
      rules: .rules_nightly

  # MPI
  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_intel_impi_latest
      vars: .vars_matrix_mpi_run
      rules: .rules_minimal

  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_gcc_openmpi_latest
      vars: .vars_matrix_mpi_run

  # release tag
  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_intel2023
      run-postfix: _tag
      build-postfix: _tag
      vars: .vars_matrix_run_tag

  # release tag + MPI
  - local: CI_templates/run.yml
    inputs:
      env: .mpcdfci_intel_impi_latest
      run-postfix: _tag
      build-postfix: _tag
      vars: .vars_matrix_mpi_run_tag


  # ============================
  # regression jobs
  # ============================
  # defined explicity, also containing rules
  - local: CI_templates/regression.yml

  # ============================
  # postprocessing jobs
  # ============================
  - local: CI_templates/postprocessing.yml
    inputs:
      env: .mpcdfci_intel2023
      rules: .rules_minimal
  
  - local: CI_templates/postprocessing.yml
    inputs:
      env: .mpcdfci_gcc13


# =================================================================================================================================
# TEMPLATES INDEPENDENT OF STAGE
# =================================================================================================================================

# ____________________________
# Rules templates
# reference: https://docs.gitlab.com/ee/ci/yaml/#rulesif
# and: https://docs.gitlab.com/ee/ci/yaml/#when
# An `- if:` beyond the first `- if:` is an "else if". And the last part (like `- when:` , does not have a condition, so it corresponds to an "else".
# when: on_success - Run the job only when no jobs in earlier stages fail or have allow_failure: true.
# when: on_failure - Run the job only when at least one job in an earlier stage fails.
# when: always - Run the job regardless of the status of jobs in earlier stages.
# when: never - Donâ€™t run the job
# when: manual - Run the job only when triggered manually.

.rules_default:
  rules:
    # disable this job for gitlab-ci branches or if MINIMAL_PIPELINE is set to "true"
    # MINIMAL_PIPELINE="false" overrides gitlab-ci jobs
    - if: ($CI_COMMIT_REF_NAME =~ /gitlab[-_]ci/ && $MINIMAL_PIPELINE != "false") || $MINIMAL_PIPELINE == "true"
      when: never
    - when: on_success

.rules_minimal:
  rules:
    # special variables for gitlab-ci branches or if MINIMAL_PIPELINE is set
    - if: ($CI_COMMIT_REF_NAME =~ /gitlab[-_]ci/ && $MINIMAL_PIPELINE != "false") || $MINIMAL_PIPELINE == "true"
      variables:
        PYTEST_KEY_OPTS: "(not highres) and (not _restart)"
        PYTEST_MARKER_OPTS: "shortrun"
      when: on_success
    - when: on_success

.rules_minimal_only:
  rules:
    # special variables for gitlab-ci branches or if MINIMAL_PIPELINE is set
    - if: ($CI_COMMIT_REF_NAME =~ /gitlab[-_]ci/ && $MINIMAL_PIPELINE != "false") || $MINIMAL_PIPELINE == "true"
      variables:
        PYTEST_KEY_OPTS: "(not highres) and (not _restart)"
        PYTEST_MARKER_OPTS: "shortrun"
      when: on_success
    # don't run otherwise
    - when: never

.rules_nightly:
  rules:
    # disable this job for gitlab-ci branches or if MINIMAL_PIPELINE is set
    - if: ($CI_COMMIT_REF_NAME =~ /gitlab[-_]ci/ && $MINIMAL_PIPELINE != "false") || $MINIMAL_PIPELINE == "true"
      when: never
    # only run this job in the nightly pipeline
    - if: $NIGHTLY_PIPELINE == "true"
      when: on_success
    - when: never

# ____________________________
# MPCDF new Docker images
# (each providing a toolchain based on a single combination of compiler and MPI variant)

# MPCDF Docker image intel_2023_1_0_x:latest
.mpcdfci_intel2023:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/intel_2023_1_0_x:latest
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""
    OMP_NUM_THR: "4"

# MPCDF Docker image intel-impi:latest
.mpcdfci_intel_impi_latest:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/intel-impi:latest
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
    MPI_RNKS_MODE: "_nranks${MPI_RNKS}"
    OMP_NUM_THR: "2"

# MPCDF Docker image gcc_13:latest
.mpcdfci_gcc13:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc_13:latest
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"
    CURR_CMP: "gnu"
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""
    OMP_NUM_THR: "4"

# MPCDF Docker image gcc-openmpi:latest
.mpcdfci_gcc_openmpi_latest:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc-openmpi:latest
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"
    CURR_CMP: "gnu_mpi"
    MPI_MODE: "mpiON"
    MPI_RNKS_MODE: "_nranks${MPI_RNKS}"
    OMP_NUM_THR: "2"

# MPCDF Docker image intel_2023_1_0_x:latest
.mpcdfci_nvhpc23:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/nvhpcsdk_23:latest
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"
    CURR_CMP: "nvidia"
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""
    OMP_NUM_THR: "4"

# =================================================================================================================================
# TEMPLATES FOR STAGE "build" 
# =================================================================================================================================

# ____________________________
# ${CI_COMMIT_REF_NAME} branch/tag (CI trigger commit)

.cmake_def_opts:
  variables:
    COMPILE_GVEC: "ON"
    LINK_TO_NETCDF: "ON"
    COMPILE_CONVERTERS: "ON"
    CMAKE_DEF_OPTS: "-DCOMPILE_GVEC=${COMPILE_GVEC} -DCOMPILE_GVEC_TO_CASTOR3D=${COMPILE_CONVERTERS} -DCOMPILE_GVEC_TO_GENE=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_JOREK=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_HOPR=${COMPILE_CONVERTERS}  -DLINK_GVEC_TO_NETCDF=${LINK_TO_NETCDF} -DCOMPILE_GVEC_AS_STATIC_LIB=ON"

# MPI not needed/tested for converters
.cmake_mpi_opts:
  variables:
    COMPILE_GVEC: "ON"
    LINK_TO_NETCDF: "ON"
    COMPILE_CONVERTERS: "OFF"
    CMAKE_DEF_OPTS: "-DCOMPILE_GVEC=${COMPILE_GVEC} -DCOMPILE_GVEC_TO_CASTOR3D=${COMPILE_CONVERTERS} -DCOMPILE_GVEC_TO_GENE=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_JOREK=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_HOPR=${COMPILE_CONVERTERS}  -DLINK_GVEC_TO_NETCDF=${LINK_TO_NETCDF} -DCOMPILE_GVEC_AS_STATIC_LIB=ON"

.cmake_only_converter:
  variables:
    COMPILE_GVEC: "OFF"
    LINK_TO_NETCDF: "OFF"
    COMPILE_CONVERTERS: "ON"
    CMAKE_DEF_OPTS: "-DCOMPILE_GVEC=${COMPILE_GVEC} -DCOMPILE_GVEC_TO_CASTOR3D=${COMPILE_CONVERTERS} -DCOMPILE_GVEC_TO_GENE=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_JOREK=${COMPILE_CONVERTERS}  -DCOMPILE_GVEC_TO_HOPR=${COMPILE_CONVERTERS}  -DLINK_GVEC_TO_NETCDF=${LINK_TO_NETCDF} -DCOMPILE_GVEC_AS_STATIC_LIB=ON"

.vars_matrix_build:
  parallel:
    matrix:
      - CMP_MODE: ["Debug", "Release"]
        OMP_MODE: ["ompOFF", "ompON"]

# MPI jobs
.vars_matrix_mpi_build:
  parallel:
    matrix:
      - CMP_MODE: ["Debug", "Release"]
        OMP_MODE: ["ompOFF", "ompON"]

# ____________________________
# ${HASH_TAG} branch (release version)

.vars_matrix_build_tag:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF", "ompON"]
      - CMP_MODE: ["Release"]
        OMP_MODE: ["ompON"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}

# MPI jobs
.vars_matrix_mpi_build_tag:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF", "ompON"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}


# =================================================================================================================================
# TEMPLATES FOR STAGE "run"
# =================================================================================================================================

# ____________________________
# ${CI_COMMIT_REF_NAME} branch (CI trigger commit)

.vars_matrix_run:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
      - CMP_MODE: ["Release"]
        OMP_MODE: ["ompON"]

# debug runs overwrite the PYTEST_MARKER_OPTS and PYTEST_KEY_OPTS!
.vars_matrix_run_debugrun:
  extends: .vars_matrix_run
  variables:
    PYTEST_MARKER_OPTS: "debugrun"
    PYTEST_KEY_OPTS: "(not highres) and (not _restart) and (not w7x_from_vmec)"

# there are different issues with MPI_RNKS>4 in both runners
.vars_matrix_mpi_run:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
        MPI_RNKS: ["1","2"]

# ____________________________
# ${HASH_TAG} branch (release version)

.vars_matrix_run_tag:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
      - CMP_MODE: ["Release"]
        OMP_MODE: ["ompON"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}

.vars_matrix_mpi_run_tag:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
        MPI_RNKS: ["1","2"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}


# =================================================================================================================================
# TEMPLATES FOR STAGE "post"
# =================================================================================================================================

.vars_matrix_post:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF", "ompON"]
  variables:
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""
    OMP_NUM_THR: "2"
