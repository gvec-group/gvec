# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - build_and_run

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none
#  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
#
# => SCIPT SYNTAX CAN BE CHECKED ON GITLAB with the "CI LINT" tool
#
# =================================================================================================================================

# =================================================================================================================================
# TEMPLATE DEFINITIONS
# =================================================================================================================================
# NOTE: _ipp is the runner testimony_fluxo , with tag: vm_linux

.tmpl_IPP_global: &IPP_global
  tags:
    - vm_linux

.tmpl_IPP_setup_intel: &IPP_setup_intel
  <<: *IPP_global
  before_script:
    - . ~/environments/modules_for_gvec_intel ; pwd
    - export OMP_NUM_THREADS=2

.tmpl_IPP_setup_build_intel_debug_noomp: &IPP_setup_build_intel_debug_noomp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "intel"
    CMP_MODE: "Debug"
    OMP_MODE: "OFF"
    GIT_STRATEGY: clone
  <<: *IPP_setup_intel

.tmpl_IPP_setup_build_intel_debug_omp: &IPP_setup_build_intel_debug_omp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "intel"
    CMP_MODE: "Debug"
    OMP_MODE: "ON"
    GIT_STRATEGY: clone
  <<: *IPP_setup_intel

.tmpl_IPP_setup_build_intel_release_omp: &IPP_setup_build_intel_release_omp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "intel"
    CMP_MODE: "Release"
    OMP_MODE: "ON"
    GIT_STRATEGY: clone
  <<: *IPP_setup_intel

.tmpl_IPP_setup_gnu: &IPP_setup_gnu
  <<: *IPP_global
  before_script:
    - . ~/environments/modules_for_gvec_gnu ; pwd
    - export OMP_NUM_THREADS=2

.tmpl_IPP_setup_build_gnu_debug_noomp: &IPP_setup_build_gnu_debug_noomp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "gnu"
    CMP_MODE: "Debug"
    OMP_MODE: "OFF"
    GIT_STRATEGY: clone
  <<: *IPP_setup_gnu

.tmpl_IPP_setup_build_gnu_debug_omp: &IPP_setup_build_gnu_debug_omp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "gnu"
    CMP_MODE: "Debug"
    OMP_MODE: "ON"
    GIT_STRATEGY: clone
  <<: *IPP_setup_gnu

.tmpl_IPP_setup_build_gnu_release_omp: &IPP_setup_build_gnu_release_omp
  variables:
    RUNNERNAME: "IPP"
    CURR_CMP: "gnu"
    CMP_MODE: "Release"
    OMP_MODE: "ON"
    GIT_STRATEGY: clone
  <<: *IPP_setup_gnu



.tmpl_common_arts:
  artifacts: &common_arts
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure

# =================================================================================================================================
# TEMPLATES FOR STAGE "build_and_runs"
# =================================================================================================================================

.tmpl_script_build_and_run: &script_build_and_run
  stage: build_and_run
  script:
    - pwd 
    - rm -rf build_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}    ; mkdir -p build_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}
    - rm -rf shortruns_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}; mkdir -p shortruns_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}
    - cd build_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}; pwd
    - cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DCOMPILE_GVEC_TO_CASTOR3D=ON -DCOMPILE_GVEC_TO_GENE=ON -DCOMPILE_GVEC_TO_HOPR=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE} ../. |tee ../log_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}_cmake.txt
    - make -j |tee ../log_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}_make.txt
    - cd ..; echo "... BUILD PHASE FINISHED!"
    - python gitlab_shortruns.py -execdir shortruns_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE} build_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE} |tee log_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}_shortruns.txt
  artifacts:
    <<: *common_arts
    paths:
    - log_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE}_*.txt 
    - shortruns_${CURR_CMP}_${CMP_MODE}_omp${OMP_MODE} 

# =================================================================================================================================
# Stage "build_and_run"
# =================================================================================================================================
 
IPP_build_and_run_intel_debug_noomp:
  <<: *IPP_setup_build_intel_debug_noomp
  <<: *script_build_and_run

IPP_build_and_run_intel_debug_omp:
  <<: *IPP_setup_build_intel_debug_omp
  <<: *script_build_and_run

IPP_build_and_run_intel_release_omp:
  <<: *IPP_setup_build_intel_release_omp
  <<: *script_build_and_run

IPP_build_and_run_gnu_debug_noomp:
  <<: *IPP_setup_build_gnu_debug_noomp
  <<: *script_build_and_run

IPP_build_and_run_gnu_debug_omp:
  <<: *IPP_setup_build_gnu_debug_omp
  <<: *script_build_and_run

IPP_build_and_run_gnu_release_omp:
  <<: *IPP_setup_build_gnu_release_omp
  <<: *script_build_and_run

