# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - env
  - build
  - run

workflow:
  name: 'Pipeline for branch: $CI_COMMIT_BRANCH'

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none
#  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
#
# => SCIPT SYNTAX CAN BE CHECKED ON GITLAB with the "CI LINT" tool
#
# =================================================================================================================================

# =================================================================================================================================
# TEMPLATES FOR STAGE "env" (printout the enviroment for future reference)
# =================================================================================================================================

# MPCDF shared runner
.tmpl_sharedrunner:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/module-image
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "sharedrunner"

# MPCDF testimonytwo runner
.tmpl_testimony:
  tags:
    - vm_linux
  variables:
    CMAKE_HOSTNAME: "testimony"

.tmpl_printout_env:
  script:
    - echo "Pipeline environment for branch:" $CI_COMMIT_BRANCH
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - printenv
    - module avail
    - module list
    - echo $OMP_NUM_THREADS

.tmpl_before_script_sharedrunner:
  before_script:
#    - find-module openmpi
    - . ./CI_setup/${CMAKE_HOSTNAME}_setup_${CURR_CMP}

.tmpl_before_script_testimony:
  before_script:
    - . ./CI_setup/${CMAKE_HOSTNAME}_setup_${CURR_CMP}


# =================================================================================================================================
# TEMPLATES FOR STAGE "build" 
# =================================================================================================================================

## the same matrix must be used in different stages if the variables it contains are involved;
## otherwise the dependencies no not shown in the gitlab web interface;
.build_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug", "Release"]
        OMP_MODE: ["ompOFF", "ompON"]

.tmpl_setup_build:
  extends:
    - .build_vars_matrix
  variables:
    GIT_STRATEGY: clone
    BUILDNAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
#  parallel: !reference [.cmp_vars_matrix,parallel]

.tmpl_before_script_build:
  before_script:
    - pwd
    - echo "Building with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "BUILDNAME is ${BUILDNAME}"
    - rm -rf build_${BUILDNAME}; mkdir -p build_${BUILDNAME}
    - cd build_${BUILDNAME}; pwd
    - echo "cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} ../."

.tmpl_script_build:
  script:
    #- cmake -DCMAKE_HOSTNAME=hydra -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DCOMPILE_GVEC_TO_CASTOR3D=ON -DCOMPILE_GVEC_TO_GENE=ON -DCOMPILE_GVEC_TO_JOREK=ON -DCOMPILE_GVEC_TO_HOPR=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE} ../. |tee ../log_${BUILDNAME}_cmake.txt
    # only compile gvec
    - cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} -DCOMPILE_GVEC_AS_STATIC_LIB=ON ../. |tee ../log_${BUILDNAME}_cmake.txt
    - make -j |tee ../log_${BUILDNAME}_make.txt
    - cd ..; echo "... BUILD PHASE FINISHED!"
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    paths:
      - build_${BUILDNAME}
      - log_${BUILDNAME}_*.txt 
    expire_in: 1 week
    when: always
#    when: on_failure


# =================================================================================================================================
# TEMPLATES FOR STAGE "run"
# =================================================================================================================================

# we could also extract the parallel:matrix to standalone .run_vars_matrix template
.tmpl_setup_run:
#  extends:
#    - .build_vars_matrix
# OR
  parallel:
    matrix:
      - OMP_MODE: ["ompOFF","ompON"]
        CMP_MODE: ["Debug"]
  variables:
    GIT_STRATEGY: clone #fetch
#    CMP_MODE: "Debug"
    MPI_MODE: "mpiOFF"
#a    MPI_RNKS: ""
    MPI_PRFX: ""
    BUILDNAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}

# number of MPI tasks to use at run stage
# there are different issues with MPI_RNKS>4 in both runners
.run_vars_matrix_mpi:
  parallel:
    matrix:
#      - MPI_RNKS: ["1","2","4","6","7"]
#      - MPI_RNKS: ["6","7"]
#      - MPI_RNKS: ["1","2","3","5"]
      - MPI_RNKS: ["1","2","3"]
        OMP_MODE: ["ompOFF","ompON"]
        CMP_MODE: ["Debug"]

#.tmpl_before_script_setup_run_mpi:
#  before_script:
#    - export MPI_PRFX='"mpirun --host ${HOSTNAME}:${MPI_RNKS} -np ${MPI_RNKS}"'

.tmpl_setup_run_mpi:
  extends:
    - .run_vars_matrix_mpi
  variables:
    GIT_STRATEGY: clone #fetch
#    CMP_MODE: "Debug"
#    OMP_MODE: "ompOFF"
    MPI_MODE: "mpiON"
    BUILDNAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}_nranks${MPI_RNKS}
#  parallel: !reference [.cmp_vars_matrix,parallel]

.tmpl_before_script_run:
  before_script:
    - pwd
#      line below is needed if MPI_RANKS>6 cores are requested
#    - if [ ${MPI_MODE} = 'mpiON' ]; then export MPI_PRFX="mpirun --host ${HOSTNAME}:${MPI_RNKS} -np ${MPI_RNKS}"; else export MPI_PRFX=""; fi
    - if [ ${MPI_MODE} = 'mpiON' ]; then export MPI_PRFX="mpirun -np ${MPI_RNKS}"; else export MPI_PRFX=""; fi
#    - if [ ${MPI_RNKS} -gt '4' ]; then export MPI_PRFX="mpirun --host ${HOSTNAME}:8 -np ${MPI_RNKS}"; fi
#    - if [ ${CURR_CMP} = 'gnu_mpi' ]; if [ ${MPI_RNKS} -gt '4' ]; then export MPI_PRFX="mpirun --host ${HOSTNAME}:${MPI_RNKS} -np ${MPI_RNKS}"; fi; fi
    - if [ ${OMP_MODE} = 'ompON' ]; then export OMP_NUM_THREADS=2; fi
    - echo ${HOSTNAME}
    - export EXECPRE="${MPI_PRFX}"
    - echo "${EXECPRE}"
    - rm -rf shortruns_${CASENAME}; mkdir -p shortruns_${CASENAME}
    - echo "BUILDNAME is ${BUILDNAME} >> build_${BUILDNAME}/"
    - echo "CASENAME is ${CASENAME} >> shortruns_${CASENAME}/"
    - echo "Running with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - python --version
    - echo "python gitlab_shortruns.py -case 1 -execdir shortruns_${CASENAME} -execpre "${EXECPRE}" build_${BUILDNAME}"

.tmpl_script_run:
  script:
    #- time python gitlab_shortruns.py -execdir shortruns_${CASENAME} build_${CASENAME} |tee log_${CASENAME}_shortruns.txt
    # only execute case 1 for now...
    - time python gitlab_shortruns.py -case 1 -execdir shortruns_${CASENAME} -execpre "${EXECPRE}" build_${BUILDNAME} |tee log_${CASENAME}_shortruns.txt
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    paths:
      - shortruns_${CASENAME}
      - log_${CASENAME}_*.txt 
    expire_in: 1 week
    when: always
#    when: on_failure


# =================================================================================================================================
# Stage "env"
# =================================================================================================================================

# printout MPCDF shared runner environment
sharedrunner_env:
  stage: env
  extends:
    - .tmpl_sharedrunner
    - .tmpl_printout_env

# printout MPCDF testimonytwo runner environment
testimony_env:
  stage: env
  extends:
    - .tmpl_testimony
    - .tmpl_printout_env

# =================================================================================================================================
# Stage "build"
# =================================================================================================================================

# GitLab Shared Runners
#----------------------------------------------------------------------------------------------------------------------------------

# build with Intel on MPCDF shared runner
sharedrunner_build_intel:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with GNU on MPCDF shared runner
sharedrunner_build_gnu:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "gnu"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with Intel and MPI on MPCDF shared runner
sharedrunner_build_intel_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created
###  needs: [sharedrunner_env]

# build with GNU and MPI on MPCDF shared runner
sharedrunner_build_gnu_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "gnu_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created
###  needs: [sharedrunner_env] # set the job to start as soon as the pipeline is created


# GitLab Testimonytwo Runner
#----------------------------------------------------------------------------------------------------------------------------------

# build with Intel on MPCDF testimonytwo runner
testimony_build_intel:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with GNU on MPCDF testimonytwo runner
testimony_build_gnu:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "gnu"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with Intel and MPI on MPCDF testimonytwo runner
testimony_build_intel_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created
###  needs: [testimony_env]

# build with GNU and MPI on MPCDF testimonytwo runner
testimony_build_gnu_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_build
    - .tmpl_script_build
  variables:
    CURR_CMP: "gnu_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created
###  needs: [testimony_env] # set the job to start as soon as the pipeline is created

# =================================================================================================================================
# Stage "run"
# =================================================================================================================================

# GitLab Shared Runners
#----------------------------------------------------------------------------------------------------------------------------------

# run with Intel on MPCDF shared runner
sharedrunner_run_intel:
  stage: run
  needs:
    - job: sharedrunner_build_intel
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
  variables:
    CURR_CMP: "intel"

# run with GNU on MPCDF shared runner
sharedrunner_run_gnu:
  stage: run
  needs:
    - job: sharedrunner_build_gnu
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
  variables:
    CURR_CMP: "gnu"

# run with Intel on MPCDF shared runner
sharedrunner_run_intel_mpi:
  stage: run
  needs:
    - job: sharedrunner_build_intel_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run_mpi
    - .tmpl_script_run
  variables:
    CURR_CMP: "intel_mpi"

# run with GNU on MPCDF shared runner
sharedrunner_run_gnu_mpi:
  stage: run
  needs:
    - job: sharedrunner_build_gnu_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_sharedrunner", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
#    - module list
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run_mpi
    - .tmpl_script_run
  variables:
    CURR_CMP: "gnu_mpi"


# GitLab Testimonytwo Runner
#----------------------------------------------------------------------------------------------------------------------------------

# run with Intel on MPCDF testimonytwo runner
testimony_run_intel:
  stage: run
  needs:
    - job: testimony_build_intel
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_run
    - .tmpl_script_run
  variables:
    CURR_CMP: "intel"

# run with GNU on MPCDF testimonytwo runner
testimony_run_gnu:
  stage: run
  needs:
    - job: testimony_build_gnu
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_run
    - .tmpl_script_run
  variables:
    CURR_CMP: "gnu"

# run with Intel on MPCDF testimonytwo runner
testimony_run_intel_mpi:
  stage: run
  needs:
    - job: testimony_build_intel_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_run_mpi
    - .tmpl_script_run
  variables:
    CURR_CMP: "intel_mpi"


# run with GNU on MPCDF testimonytwo runner
testimony_run_gnu_mpi:
  stage: run
  needs:
    - job: testimony_build_gnu_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_testimony", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
    - module list
  extends:
    - .tmpl_testimony
    - .tmpl_setup_run_mpi
    - .tmpl_script_run
  variables:
    CURR_CMP: "gnu_mpi"
