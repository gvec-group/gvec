# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - env
  - build
  - run
  - regression


workflow:
  name: 'Pipeline for branch: $CI_COMMIT_BRANCH'

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none #clone
  HASH_TAG: $CI_COMMIT_BRANCH
  HASH_TAG_RELEASE: develop_mpi_par
#  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script.
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
#
# => SCIPT SYNTAX CAN BE CHECKED ON GITLAB with the "CI LINT" tool
#
# =================================================================================================================================

# =================================================================================================================================
# ISSUE FOUND WITH PARALLEL MATRICES
# =================================================================================================================================

#  parallel:
#    matrix:
#      - CMP_MODE: ["Debug"]
#        OMP_MODE: ["ompON"] #only one element/variable in matrix: causes CI dependency line to break
#                             check issue report: https://gitlab.com/gitlab-org/gitlab/-/issues/428679
#                             workaround is to use the keyword "variables:" instead (like below) 
#  variables:
#    HASH_TAG: ${HASH_TAG_RELEASE}
#    CMP_MODE: "Debug"
#    OMP_MODE: "ompON"


# =================================================================================================================================
# TEMPLATES INDEPENDENT OF STAGE
# =================================================================================================================================

.tmpl_before_script_modules:
  before_script:
    - . ./CI_setup/${CMAKE_HOSTNAME}_setup_${CURR_CMP}

# =================================================================================================================================
# TEMPLATES FOR STAGE "env" (printout the enviroment for future reference)
# =================================================================================================================================

# MPCDF new Docker images (each of which provides a toolchain based on a single combination of compiler and MPI variant)

# MPCDF Docker image intel_2023_1_0_x:latest
.tmpl_docker_intel2023:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/intel_2023_1_0_x:latest
#  tags:
#    - '2024'
#    - 'latest'
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"

# MPCDF Docker image intel-impi:latest
.tmpl_docker_intel_impi_latest:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/intel-impi:latest
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"

# MPCDF Docker image gcc_13:latest
.tmpl_docker_gcc13:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc_13:latest
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"

# MPCDF Docker image gcc-openmpi:latest
.tmpl_docker_gcc_openmpi_latest:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc-openmpi:latest
  variables:
    CMAKE_HOSTNAME: "mpcdfcirunner"

# MPCDF shared runner (module-image, soon legacy, then deprecated)
.tmpl_sharedrunner:
  image: gitlab-registry.mpcdf.mpg.de/mpcdf/module-image
  tags:
    - shared
  variables:
    CMAKE_HOSTNAME: "sharedrunner"

# MPCDF testimonytwo runner
.tmpl_testimony:
  tags:
    - vm_linux
  variables:
    CMAKE_HOSTNAME: "testimony"

.tmpl_script_env:
  script:
    - echo "Pipeline environment for branch:" $CI_COMMIT_BRANCH
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - printenv
    - module avail
    - echo $OMP_NUM_THREADS


# =================================================================================================================================
# TEMPLATES FOR STAGE "build" 
# =================================================================================================================================

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

.build_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug", "Release"]
        OMP_MODE: ["ompOFF", "ompON"]

# ____________________________
# ${HASH_TAG} branch (release version)

.build_tag_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF", "ompON"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}


# ____________________________
# Independent of ${HASH_TAG}

.tmpl_setup_build:
  variables:
    GIT_STRATEGY: clone
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}

.tmpl_before_script_build:
  before_script:
#    - mkdir develop && cd develop && cp -R ../.git ./
#    - git checkout -- . && git branch --all
#    - git checkout develop_mpi_par
#    - cd ..
    - pwd
    - echo "Building on branch ${HASH_TAG} with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "is ${HASH_TAG} the same as ${CI_COMMIT_BRANCH}?"
    - if [ ${HASH_TAG} != ${CI_COMMIT_BRANCH} ]; then git checkout ${HASH_TAG}; fi
    - echo "BUILDNAME is ${BUILDNAME}"
    - rm -rf build_${BUILDNAME}; mkdir -p build_${BUILDNAME}
    - cd build_${BUILDNAME}; pwd
    - echo "cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} -DCOMPILE_GVEC_AS_STATIC_LIB=ON ../."

.tmpl_script_build:
  script:
    #- cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DCOMPILE_GVEC_TO_CASTOR3D=ON -DCOMPILE_GVEC_TO_GENE=ON -DCOMPILE_GVEC_TO_JOREK=ON -DCOMPILE_GVEC_TO_HOPR=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE} ../. |tee ../log_${BUILDNAME}_cmake.txt
    # only compile gvec
    - cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DCOMPILE_GVEC=ON -DLINK_GVEC_TO_NETCDF=ON -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} -DCOMPILE_GVEC_AS_STATIC_LIB=ON ../. |tee ../log_${BUILDNAME}_cmake.txt
    - make -j |tee ../log_${BUILDNAME}_make.txt
    - cd ..; echo "... BUILD PHASE FINISHED!"
  artifacts:
    name: "${CI_PIPELINE_ID}_${BUILDNAME}"
#    name: "${HASH_TAG}_${CI_PIPELINE_ID}_${BUILDNAME}"
    paths:
      - build_${BUILDNAME}
      - log_${BUILDNAME}_*.txt
#      - CI_setup
#      - gitlab_*.py
    expire_in: 1 week
    when: always
#    when: on_failure


# =================================================================================================================================
# TEMPLATES FOR STAGE "run"
# =================================================================================================================================

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

.run_vars_matrix:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
  variables:
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""

# there are different issues with MPI_RNKS>4 in both runners
.run_vars_matrix_mpi:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
        MPI_RNKS: ["1","2"]
  variables:
    MPI_MODE: "mpiON"
    MPI_RNKS_MODE: "_nranks${MPI_RNKS}"


# ____________________________
# ${HASH_TAG} branch (release version)

.run_tag_vars_matrix:
  parallel:
    matrix:
      - OMP_MODE: ["ompOFF","ompON"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}
    CMP_MODE: "Debug"
    MPI_MODE: "mpiOFF"
    MPI_RNKS_MODE: ""


.run_tag_vars_matrix_mpi:
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
        MPI_RNKS: ["1","2"]
  variables:
    HASH_TAG: ${HASH_TAG_RELEASE}
    MPI_MODE: "mpiON"
    MPI_RNKS_MODE: "_nranks${MPI_RNKS}"


# ____________________________
# Independent of ${HASH_TAG}

.tmpl_setup_run:
  variables:
    GIT_STRATEGY: clone
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}${MPI_RNKS_MODE}

.tmpl_before_script_run:
  before_script:
#      line below is needed if MPI_RANKS>6 cores are requested
#    - if [ ${CURR_CMP} = 'gnu_mpi' ]; if [ ${MPI_RNKS} -gt '4' ]; then export MPI_PRFX="mpirun --host ${HOSTNAME}:${MPI_RNKS} -np ${MPI_RNKS}"; fi; fi
    - if [ ${MPI_MODE} = 'mpiON' ]; then export MPI_PRFX="mpirun -np ${MPI_RNKS}"; else export MPI_PRFX=""; fi
    - if [ ${OMP_MODE} = 'ompON' ]; then export OMP_NUM_THREADS=2; fi
    - echo ${HOSTNAME}
    - export EXECPRE="${MPI_PRFX}"
    - echo "HASH_TAG is ${HASH_TAG}"
    - if [ ${HASH_TAG} != ${CI_COMMIT_BRANCH} ]; then git checkout ${HASH_TAG}; fi
    - echo "BUILDNAME is ${BUILDNAME} >> build_${BUILDNAME}/"
    - echo "CASENAME is ${CASENAME} >> shortruns_${CASENAME}/"
    - rm -rf shortruns_${CASENAME}; mkdir -p shortruns_${CASENAME}
    - echo "Running with $CURR_CMP in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - python --version
    - echo "python gitlab_shortruns.py -case 1 -execdir shortruns_${CASENAME} -execpre "${EXECPRE}" build_${BUILDNAME}"

.tmpl_script_run:
  script:
    #- time python gitlab_shortruns.py -execdir shortruns_${CASENAME} build_${CASENAME} |tee log_${CASENAME}_shortruns.txt
    # only execute case 1 for now...
    - time python gitlab_shortruns.py -case 1 -execdir shortruns_${CASENAME} -execpre "${EXECPRE}" build_${BUILDNAME} |tee log_${CASENAME}_shortruns.txt
  artifacts:
#    name: "${HASH_TAG}_${CI_PIPELINE_ID}_${CASENAME}"
    name: "${CASENAME}"
    paths:
      - log_${CASENAME}_shortruns.txt
      - shortruns_${CASENAME}
    expire_in: 1 week
    when: always
#    when: on_failure


# =================================================================================================================================
# TEMPLATES FOR STAGE "regression"
# =================================================================================================================================

.tmpl_script_regression:
  variables:
    GIT_STRATEGY: fetch
  script:
    - numdiff --version
    - echo shortruns_${CASENAME_1}
    - echo shortruns_${CASENAME_2}
    - python gitlab_regressions.py shortruns_${CASENAME_1} shortruns_${CASENAME_2}
  artifacts:
    name: "${CASENAME_1}_vs_${CASENAME_2}"
    paths:
      - log_compare_*.txt
      - tmp*
      - std*
    expire_in: 1 week
    when: on_failure


# =================================================================================================================================
# Stage "env"
# =================================================================================================================================

# printout MPCDF Docker (Intel 2023) shared runner environment
docker_intel2023_env:
  stage: env
  extends:
    - .tmpl_docker_intel2023
    - .tmpl_script_env

# printout MPCDF Docker (GCC 13) shared runner environment
docker_gcc13_env:
  stage: env
  extends:
    - .tmpl_docker_gcc13
    - .tmpl_script_env

# printout MPCDF shared runner environment
sharedrunner_env:
  stage: env
  extends:
    - .tmpl_sharedrunner
    - .tmpl_script_env

# printout MPCDF testimonytwo runner environment
testimony_env:
  stage: env
  extends:
    - .tmpl_testimony
    - .tmpl_script_env

# =================================================================================================================================
# Stage "build"
# =================================================================================================================================

# ---------------------------------------------------------------------------------------------------------------------------------
# GitLab Shared Runners

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

# build with MPCDF Docker (Intel 2023) shared runner environment
docker_intel2023_build:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_intel2023
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with MPCDF Docker (GCC 13) shared runner environment
docker_gcc13_build:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_gcc13
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "gnu"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with MPCDF Docker (intel-impi:latest) shared runner environment
docker_intel_impi_latest_build:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_intel_impi_latest
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created

# build with MPCDF Docker (gcc-openmpi:latest) shared runner environment
docker_gcc_openmpi_latest_build:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_gcc_openmpi_latest
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "gnu_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created


# build with Intel on MPCDF shared runner
sharedrunner_build_intel:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with GNU on MPCDF shared runner
sharedrunner_build_gnu:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "gnu"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with Intel and MPI on MPCDF shared runner
sharedrunner_build_intel_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created
###  needs: [sharedrunner_env]

## build with GNU and MPI on MPCDF shared runner
#sharedrunner_build_gnu_mpi:
#  stage: build
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_build","before_script"]
#  extends:
#    - .tmpl_sharedrunner
#    - .tmpl_setup_build
#    - .tmpl_script_build
#    - .build_vars_matrix  # matrix of variables
#  variables:
#    CURR_CMP: "gnu_mpi"
#    MPI_MODE: "mpiON"
#  needs: [] # set the job to start as soon as the pipeline is created
####  needs: [sharedrunner_env]

# ____________________________
# ${HASH_TAG} branch (release version)

# build (TAG) with MPCDF Docker (Intel 2023) shared runner environment
docker_intel2023_build_tag:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_intel2023
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_tag_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build (TAG) with MPCDF Docker (intel-impi:latest) shared runner environment
docker_intel_impi_latest_build_tag:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_docker_intel_impi_latest
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_tag_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created

# build with Intel on MPCDF shared runner
sharedrunner_build_tag_intel:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
#b    - .tmpl_setup_build_tag
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_tag_vars_matrix  # matrix of variables
#  script:
#    - ls -las && echo "sharedrunner_build_tag_intel"
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

# build with Intel and MPI on MPCDF shared runner
sharedrunner_build_tag_intel_mpi:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_tag_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"
    MPI_MODE: "mpiON"
  needs: [] # set the job to start as soon as the pipeline is created


# ---------------------------------------------------------------------------------------------------------------------------------
# GitLab Testimonytwo Runner

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

# build with Intel on MPCDF testimonytwo runner
testimony_build_intel:
  stage: build
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_build","before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_build
    - .tmpl_script_build
    - .build_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"
    MPI_MODE: "mpiOFF"
  needs: [] # set the job to start as soon as the pipeline is created

## build with GNU on MPCDF testimonytwo runner
#testimony_build_gnu:
#  stage: build
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_build","before_script"]
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_build
#    - .tmpl_script_build
#  variables:
#    CURR_CMP: "gnu"
#    MPI_MODE: "mpiOFF"
#  needs: [] # set the job to start as soon as the pipeline is created

## build with Intel and MPI on MPCDF testimonytwo runner
#testimony_build_intel_mpi:
#  stage: build
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_build","before_script"]
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_build
#    - .tmpl_script_build
#  variables:
#    CURR_CMP: "intel_mpi"
#    MPI_MODE: "mpiON"
#  needs: [] # set the job to start as soon as the pipeline is created
####  needs: [testimony_env]

## build with GNU and MPI on MPCDF testimonytwo runner
#testimony_build_gnu_mpi:
#  stage: build
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_build","before_script"]
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_build
#    - .tmpl_script_build
#  variables:
#    CURR_CMP: "gnu_mpi"
#    MPI_MODE: "mpiON"
#  needs: [] # set the job to start as soon as the pipeline is created

# =================================================================================================================================
# Stage "run"
# =================================================================================================================================

# ---------------------------------------------------------------------------------------------------------------------------------
# GitLab Shared Runners

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

# run with MPCDF Docker (intel2023) shared runner environment
docker_intel2023_run:
  stage: run
  needs:
    - job: docker_intel2023_build
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_intel2023
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"

# run with MPCDF Docker (gcc13) shared runner environment
docker_gcc13_run:
  stage: run
  needs:
    - job: docker_gcc13_build
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_gcc13
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "gnu"

# run with MPCDF Docker (intel-impi:latest) shared runner environment
docker_intel_impi_latest_run:
  stage: run
  needs:
    - job: docker_intel_impi_latest_build
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_intel_impi_latest
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix_mpi  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

# run with MPCDF Docker (gcc-openmpi:latest) shared runner environment
docker_gcc_openmpi_latest_run:
  stage: run
  needs:
    - job: docker_gcc_openmpi_latest_build
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_gcc_openmpi_latest
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix_mpi  # matrix of variables
  variables:
    CURR_CMP: "gnu_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

# run with Intel on MPCDF shared runner
sharedrunner_run_intel:
  stage: run
  needs:
    - job: sharedrunner_build_intel
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"

# run with GNU on MPCDF shared runner
sharedrunner_run_gnu:
  stage: run
  needs:
    - job: sharedrunner_build_gnu
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "gnu"

# run with Intel on MPCDF shared runner
sharedrunner_run_intel_mpi:
  stage: run
  needs:
    - job: sharedrunner_build_intel_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix_mpi  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

## run with GNU on MPCDF shared runner
#sharedrunner_run_gnu_mpi:
#  stage: run
#  needs:
#    - job: sharedrunner_build_gnu_mpi
#      artifacts: true
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_run", "before_script"]
#  extends:
#    - .tmpl_sharedrunner
##b    - .tmpl_setup_run_mpi
#    - .tmpl_setup_run
#    - .tmpl_script_run
#    - .run_vars_matrix_mpi  # matrix of variables
#  variables:
#    CURR_CMP: "gnu_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

# ____________________________
# ${HASH_TAG} branch (release version)

# run with MPCDF Docker (intel2023) shared runner environment
docker_intel2023_run_tag:
  stage: run
  needs:
    - job: docker_intel2023_build_tag
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_intel2023
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_tag_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"

# run with MPCDF Docker (intel-impi:latest) shared runner environment
docker_intel_impi_latest_run_tag:
  stage: run
  needs:
    - job: docker_intel_impi_latest_build_tag
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_docker_intel_impi_latest
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_tag_vars_matrix_mpi  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above


# run with Intel on MPCDF shared runner
sharedrunner_run_tag_intel:
  stage: run
  needs:
    - job: sharedrunner_build_tag_intel
      artifacts: true
#      parallel:
#        matrix:
#          - CMP_MODE: ["Debug"]
#            OMP_MODE: ["ompON"]
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_tag_vars_matrix  # matrix of variables
#  script:
#    - ls -las && echo "sharedrunner_run_tag_intel"
  variables:
    CURR_CMP: "intel"

# run with Intel on MPCDF shared runner
sharedrunner_run_tag_intel_mpi:
  stage: run
  needs:
    - job: sharedrunner_build_tag_intel_mpi
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_sharedrunner
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_tag_vars_matrix_mpi  # matrix of variables
  variables:
    CURR_CMP: "intel_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above


# ---------------------------------------------------------------------------------------------------------------------------------
# GitLab Testimonytwo Runner

# ____________________________
# ${CI_COMMIT_BRANCH} branch (CI trigger branch)

# run with Intel on MPCDF testimonytwo runner
testimony_run_intel:
  stage: run
  needs:
    - job: testimony_build_intel
      artifacts: true
  before_script:
    - !reference [".tmpl_before_script_modules", "before_script"]
    - !reference [".tmpl_before_script_run", "before_script"]
  extends:
    - .tmpl_testimony
    - .tmpl_setup_run
    - .tmpl_script_run
    - .run_vars_matrix  # matrix of variables
  variables:
    CURR_CMP: "intel"

## run with GNU on MPCDF testimonytwo runner
#testimony_run_gnu:
#  stage: run
#  needs:
#    - job: testimony_build_gnu
#      artifacts: true
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_run", "before_script"]
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_run
#    - .tmpl_script_run
#  variables:
#    CURR_CMP: "gnu"

## run with Intel on MPCDF testimonytwo runner
#testimony_run_intel_mpi:
#  stage: run
#  needs:
#    - job: testimony_build_intel_mpi
#      artifacts: true
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_run", "before_script"]
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_run_mpi
#    - .tmpl_script_run
#  variables:
#    CURR_CMP: "intel_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

## run with GNU on MPCDF testimonytwo runner
#testimony_run_gnu_mpi:
#  stage: run
#  needs:
#    - job: testimony_build_gnu_mpi
#      artifacts: true
#  before_script:
#    - !reference [".tmpl_before_script_modules", "before_script"]
#    - !reference [".tmpl_before_script_run", "before_script"]
#    - module list
#  extends:
#    - .tmpl_testimony
#    - .tmpl_setup_run_mpi
#    - .tmpl_script_run
#  variables:
#    CURR_CMP: "gnu_mpi"  # _mpi must be used together with .run_vars_matrix_mpi above

# =================================================================================================================================
# Stage "regression"
# =================================================================================================================================

# ---------------------------------------------------------------------------------------------------------------------------------
# GitLab Shared Runners

# compare results between intel and gnu on current branches (no MPI)
docker_regression_intel_gnu:
  stage: regression
  needs:
    - job: docker_intel2023_run
      artifacts: true
    - job: docker_gcc13_run
      artifacts: true
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
  variables:
    CURR_CMP: intel # needed to load modules (numdiff cmd!)
    HASH_TAG_1: ${HASH_TAG}
    HASH_TAG_2: ${HASH_TAG}
    CURR_CMP_1: ${CURR_CMP}
    CURR_CMP_2: gnu
    CASENAME_1: ${HASH_TAG_1}_${CURR_CMP_1}_${CMP_MODE}_${OMP_MODE}_mpiOFF
    CASENAME_2: ${HASH_TAG_2}_${CURR_CMP_2}_${CMP_MODE}_${OMP_MODE}_mpiOFF
  extends:
    - .tmpl_docker_intel2023      # need to choose one (does not matter which) Docker image
    - .tmpl_before_script_modules # need to load modules (numdiff cmd!)
    - .tmpl_script_regression


# compare results between current and tag branches (no MPI)
shared_regression_tag_intel:
  stage: regression
  needs:
    - job: sharedrunner_run_intel
      artifacts: true
    - job: sharedrunner_run_tag_intel
      artifacts: true
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
  variables:
#    GIT_STRATEGY: fetch
    CURR_CMP: intel # needed to load modules (numdiff cmd!)
    HASH_TAG_1: ${HASH_TAG}
    HASH_TAG_2: ${HASH_TAG_RELEASE}
    CURR_CMP_1: ${CURR_CMP}
    CURR_CMP_2: ${CURR_CMP}
    CASENAME_1: ${HASH_TAG_1}_${CURR_CMP_1}_${CMP_MODE}_${OMP_MODE}_mpiOFF
    CASENAME_2: ${HASH_TAG_2}_${CURR_CMP_2}_${CMP_MODE}_${OMP_MODE}_mpiOFF
  extends:
    - .tmpl_sharedrunner          # needed to load modules (numdiff cmd!)
    - .tmpl_before_script_modules # needed to load modules (numdiff cmd!)
    - .tmpl_script_regression

# compare results between intel and gnu on current branches
shared_regression_intel_mpi:
  stage: regression
  script:
    - numdiff --version
    - echo shortruns_${CASENAME_1}
    - echo shortruns_${CASENAME_2}
    - python gitlab_regressions.py shortruns_${CASENAME_1} shortruns_${CASENAME_2}
  needs:
    - job: sharedrunner_run_intel
      artifacts: true
    - job: sharedrunner_run_intel_mpi
      artifacts: true
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
  variables:
    GIT_STRATEGY: fetch
    CURR_CMP: intel # needed to load modules (numdiff cmd!)
    HASH_TAG_1: ${HASH_TAG}
    HASH_TAG_2: ${HASH_TAG}
    CURR_CMP_1: ${CURR_CMP}
    CURR_CMP_2: ${CURR_CMP}_mpi
    CASENAME_1: ${HASH_TAG_1}_${CURR_CMP_1}_${CMP_MODE}_${OMP_MODE}_mpiOFF
    CASENAME_2: ${HASH_TAG_2}_${CURR_CMP_2}_${CMP_MODE}_${OMP_MODE}_mpiON_nranks2
  extends:
    - .tmpl_sharedrunner          # needed to load modules (numdiff cmd!)
    - .tmpl_before_script_modules # needed to load modules (numdiff cmd!)
    - .tmpl_script_regression


# compare results between intel and gnu on current branches (no MPI)
shared_regression_intel_gnu:
  stage: regression
  needs:
    - job: sharedrunner_run_intel
      artifacts: true
    - job: sharedrunner_run_gnu
      artifacts: true
  parallel:
    matrix:
      - CMP_MODE: ["Debug"]
        OMP_MODE: ["ompOFF","ompON"]
  variables:
    CURR_CMP: intel # needed to load modules (numdiff cmd!)
    HASH_TAG_1: ${HASH_TAG}
    HASH_TAG_2: ${HASH_TAG}
    CURR_CMP_1: ${CURR_CMP}
    CURR_CMP_2: gnu
    CASENAME_1: ${HASH_TAG_1}_${CURR_CMP_1}_${CMP_MODE}_${OMP_MODE}_mpiOFF
    CASENAME_2: ${HASH_TAG_2}_${CURR_CMP_2}_${CMP_MODE}_${OMP_MODE}_mpiOFF
  extends:
    - .tmpl_sharedrunner          # needed to load modules (numdiff cmd!)
    - .tmpl_before_script_modules # needed to load modules (numdiff cmd!)
    - .tmpl_script_regression
