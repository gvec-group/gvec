# SCRIPT TEMPLATES
# This file contains the templates for the scripts that are used in the CI pipeline.
# =================================================================================================================================


# =================================================================================================================================
# TEMPLATES INDEPENDENT OF STAGE
# =================================================================================================================================

# execute the bash script in `CI_setup` to setup the environment, e.g. by loading modules
.before_script_modules:
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:setup-env[collapsed=true]\r\e[0KSetup Environment"
    - echo ${CMAKE_HOSTNAME} ${CURR_CMP}
    - . ./CI_setup/${CMAKE_HOSTNAME}_setup_${CURR_CMP}
    - echo "Fortran compiler is ${FC}"
    - git status
    - echo -e "\e[0Ksection_end:`date +%s`:setup-env\r\e[0K"


# =================================================================================================================================
# TEMPLATES FOR STAGE "env" (printout the enviroment for future reference)
# =================================================================================================================================

.script_env:
  script:
    - echo "Pipeline environment for branch $CI_COMMIT_REF_NAME and tag $HASH_TAG_REFERENCE"
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - echo -e "\e[0Ksection_start:`date +%s`:printenv[collapsed=true]\r\e[0KEnvironment Variables"
    - printenv
    - echo -e "\e[0Ksection_end:`date +%s`:printenv\r\e[0K"
    - echo $OMP_NUM_THREADS
    - echo $SHELL


# =================================================================================================================================
# TEMPLATES FOR STAGE "build"
# =================================================================================================================================

.script_build:
  variables:
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-build[collapsed=true]\r\e[0KPrepare Build"
    - pwd
    - echo "Building on branch ${HASH_TAG} with ${CURR_CMP} in ${CMP_MODE} mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "is ${HASH_TAG} the same as ${CI_COMMIT_REF_NAME}?"
    - if [ ${HASH_TAG} != ${CI_COMMIT_REF_NAME} ]; then git fetch --tags; git checkout ${HASH_TAG}; fi
    - git tag
    - echo "DRY-RUN OF THE FULL PYTEST CALL"
    - python --version
    - python -m pytest --version
    - mkdir _dry_run
    - echo -e "\e[0Ksection_start:`date +%s`:pytest-dryrun[collapsed=true]\r\e[0KPytest dry-run"
    - ${PYTEST_EXEC_CMD} --log-file=log_dryrun.txt --rundir=_dry_run --refdir=_dry_run --postdir=_dry_post --dry-run
    - echo -e "\e[0Ksection_end:`date +%s`:pytest-dryrun\r\e[0K"
    - rm -rf _dry_*
    - echo "BUILDNAME is ${BUILDNAME}"
    - rm -rf build_${BUILDNAME}; mkdir -p build_${BUILDNAME}
    - cd build_${BUILDNAME}; pwd
    - echo -e "\e[0Ksection_end:`date +%s`:pre-build\r\e[0K"
    # BUILD
    - echo -e "\e[0Ksection_start:`date +%s`:cmake[collapsed=true]\r\e[0KCMake"
    - echo "cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} ${CMAKE_DEF_OPTS} ../."
    - cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} ${CMAKE_DEF_OPTS} ../. |tee ../log_${BUILDNAME}_cmake.txt
    - echo -e "\e[0Ksection_end:`date +%s`:cmake\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=true]\r\e[0KMake"
    - make -j VERBOSE=1 |tee ../log_${BUILDNAME}_make.txt
    - echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"
    - cd ..; echo "... BUILD PHASE FINISHED!"
  artifacts:
    name: "${CI_PIPELINE_ID}_build_${BUILDNAME}"
    paths:
      - build_${BUILDNAME}
      - log_${BUILDNAME}_*.txt
    expire_in: 1 week
    when: always

.script_build_pip:
  variables:
    BUILDNAME: ${HASH_TAG}_pip
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-build[collapsed=true]\r\e[0KPrepare Build"
    - pwd
    # Debug Information
    - echo "Building on branch ${HASH_TAG} with ${CURR_CMP} in ${CMP_MODE} mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "is ${HASH_TAG} the same as ${CI_COMMIT_REF_NAME}?"
    - if [ ${HASH_TAG} != ${CI_COMMIT_REF_NAME} ]; then git fetch --tags; git checkout ${HASH_TAG}; fi
    - git tag
    - python --version
    - echo "BUILDNAME is ${BUILDNAME}"
    # Create Virtual Environment
    - rm -rf venv_${BUILDNAME}
    - python -m venv venv_${BUILDNAME}
    - source venv_${BUILDNAME}/bin/activate
    - which python
    - which pip
    - pip list
    - echo -e "\e[0Ksection_start:`date +%s`:printenv[collapsed=true]\r\e[0KEnvironment Variables"
    - printenv
    - echo -e "\e[0Ksection_end:`date +%s`:printenv\r\e[0K"
    - echo -e "\e[0Ksection_end:`date +%s`:pre-build\r\e[0K"
    # BUILD
    - echo -e "\e[0Ksection_start:`date +%s`:pip[collapsed=true]\r\e[0KPip install"
    - pip install .[dev] -v |& tee log_${BUILDNAME}.txt
    - pip list
    - echo -e "\e[0Ksection_end:`date +%s`:pip\r\e[0K"
    - echo "... BUILD PHASE FINISHED!"
    # Debug Information #2
    - echo -e "\e[0Ksection_start:`date +%s`:printenv2[collapsed=true]\r\e[0KEnvironment Variables (post install)"
    - printenv
    - echo -e "\e[0Ksection_end:`date +%s`:printenv2\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:readelf[collapsed=true]\r\e[0KReadelf (_post_f90.so)"
    - readelf -d venv_${BUILDNAME}/lib/python3.10/site-packages/gvec/_libfgvec.cpython-310-x86_64-linux-gnu.so
    - echo -e "\e[0Ksection_end:`date +%s`:readelf\r\e[0K"
    # Check for successful installation
    - echo -e "\e[0Ksection_start:`date +%s`:run[collapsed=true]\r\e[0KPreliminary pytest"
    - which pytest
    - pytest
      -m "unit"
      -k "version"
      -v -rA
      --junitxml=pytest.xml
    - echo -e "\e[0Ksection_end:`date +%s`:run\r\e[0K"
  artifacts:
    name: "${CI_PIPELINE_ID}_build_${BUILDNAME}"
    paths:
      - venv_${BUILDNAME}
      - log_${BUILDNAME}_*.txt
    expire_in: 1 week
    when: always
    reports:
      junit:
        - pytest.xml

# =================================================================================================================================
# TEMPLATES FOR STAGE "run"
# =================================================================================================================================

# also required in "post"
.before_script_exportvars:
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:exportvars[collapsed=true]\r\e[0KExport environment variables"
    - if [ ${MPI_MODE} = 'mpiON' ]; then export MPI_PRFX="mpirun -np ${MPI_RNKS}"; else export MPI_PRFX=""; fi
    - if [ ${OMP_MODE} = 'ompON' ]; then export OMP_NUM_THREADS=${OMP_NUM_THR}; fi
    - echo "MPI prefix:" ${MPI_PRFX}
    - echo "OpenMP number of threads:" $OMP_NUM_THREADS ", should be =" ${OMP_NUM_THR}
    - echo "hostname:" $HOSTNAME
    - export EXECPRE="${MPI_PRFX}"
    - echo "HASH_TAG is ${HASH_TAG}"
    - echo "BUILDNAME is ${BUILDNAME} >> build_${BUILDNAME}/"
    - echo "CASENAME is ${CASENAME} >> CIrun_${CASENAME}/"
    - echo "Running with ${CURR_CMP} in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - python --version
    - python -m pytest --version
    - echo -e "\e[0Ksection_end:`date +%s`:exportvars\r\e[0K"

.script_run:
  variables:
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}${MPI_RNKS_MODE}
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-run[collapsed=true]\r\e[0KPrepare Run"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME}"
    - echo ${PYTEST_EXEC_CMD}  --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --dry-run
    -      ${PYTEST_EXEC_CMD}  --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --dry-run
    - rm -rf CIrun_${CASENAME}
    - echo -e "\e[0Ksection_end:`date +%s`:pre-run\r\e[0K"
    # RUN
    - echo -e "\e[0Ksection_start:`date +%s`:run[collapsed=true]\r\e[0KRun"
    - echo "OpenMP number of threads:" $OMP_NUM_THREADS
    # pytest: no restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_norestart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --junitxml=pytest.xml
      --annotations=annotations.json
    # pytest: restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_restart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and restart"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --junitxml=pytest-restart.xml
      --annotations=annotations.json
    - echo -e "\e[0Ksection_end:`date +%s`:run\r\e[0K"
  artifacts:
    name: "${CI_PIPELINE_ID}_run_${CASENAME}"
    paths:
      - log_pytest_run_norestart.txt
      - log_pytest_run_restart.txt
      - CIrun_${CASENAME}
    expire_in: 1 week
    when: always
    reports:
      junit:
        - pytest.xml
        - pytest-restart.xml
      annotations:
        - annotations.json

# =================================================================================================================================
# TEMPLATES FOR STAGE "unit"
# =================================================================================================================================

.script_unit:
  variables:
    BUILDNAME: ${HASH_TAG}_pip
    CASENAME: ${HASH_TAG}_pip
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre[collapsed=true]\r\e[0KPreparation"
    - echo $PATH
    - echo venv_${BUILDNAME}/bin/activate
    - source venv_${BUILDNAME}/bin/activate
    - module list
    - pip list
    - echo -e "\e[0Ksection_end:`date +%s`:pre\r\e[0K"
    # RUN
    - echo -e "\e[0Ksection_start:`date +%s`:run[collapsed=true]\r\e[0KUnit"
    - which pytest
    - pytest
      -m "unit"
      -v -rA
      --junitxml=pytest.xml
    - echo -e "\e[0Ksection_end:`date +%s`:run\r\e[0K"
  artifacts:
    reports:
      junit:
        - pytest.xml

# =================================================================================================================================
# TEMPLATES FOR STAGE "regression"
# =================================================================================================================================

.script_regression:
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-reg[collapsed=true]\r\e[0KPrepare Regression"
    - python --version
    - python -m pytest --version
    - echo $SHELL
    - set +e #continue script after command fails, gitlab otherwise only returns 0 or 1
    - echo CIrun_${CASENAME_1}
    - echo CIrun_${CASENAME_2}
    - export PYTEST_DIR_OPTS="--rundir=CIrun_${CASENAME_1} --refdir=CIrun_${CASENAME_2}"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --dry-run
    -      ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --dry-run
    - echo -e "\e[0Ksection_end:`date +%s`:pre-reg\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:regression[collapsed=true]\r\e[0KRegression"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --junitxml=pytest.xml
    # pytest: regression
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_regression.txt
      -m "${PYTEST_MARKER_OPTS} and regression_stage"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      "${PYTEST_EXTRA_OPTS}"
      --junitxml=pytest.xml
      --annotations=annotations.json
      || RET=$?
    - echo -e "\e[0Ksection_end:`date +%s`:regression\r\e[0K"
    - exit $RET
  artifacts:
    name: "${CI_PIPELINE_ID}_${CASENAME_1}_vs_${CASENAME_2}"
    paths:
      - log_pytest_regression.txt
      - CIrun_${CASENAME_1}
      - CIrun_${CASENAME_2}
    expire_in: 1 week
    when: always #on_failure
    reports:
      junit: pytest.xml
      annotations: annotations.json


# =================================================================================================================================
# TEMPLATES FOR STAGE "post"
# =================================================================================================================================

.script_post:
  variables:
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}${MPI_RNKS_MODE}
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-post[collapsed=true]\r\e[0KPrepare Postprocessing"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME} --postdir=CIpost_${CASENAME}"
    - ${PYTEST_EXEC_CMD} --log-file=log_pytest_post.txt -m "${PYTEST_MARKER_OPTS} and post_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS --junitxml=pytest.xml --dry-run
    - rm -rf CIpost_${CASENAME}
    - echo -e "\e[0Ksection_end:`date +%s`:pre-post\r\e[0K"
    # POST
    - echo -e "\e[0Ksection_start:`date +%s`:post[collapsed=true]\r\e[0KPostprocessing"
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_post.txt
      -m "${PYTEST_MARKER_OPTS} and post_stage"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      --junitxml=pytest.xml
      --annotations=annotations.json
    - echo -e "\e[0Ksection_end:`date +%s`:post\r\e[0K"
  artifacts:
    name: "${CI_PIPELINE_ID}_post_${CASENAME}"
    paths:
      - log_pytest_post.txt
      - CIpost_${CASENAME}
    expire_in: 1 week
    when: always
    reports:
      junit: pytest.xml
      annotations: annotations.json

# =================================================================================================================================
# TEMPLATES FOR STAGE "postprocessing" + "converter"
# =================================================================================================================================

.script_conv:
  variables:
    BUILDNAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}
    CASENAME: ${HASH_TAG}_${CURR_CMP}_${CMP_MODE}_${OMP_MODE}_${MPI_MODE}${MPI_RNKS_MODE}
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pre-conv[collapsed=true]\r\e[0KPrepare converter Postprocessing"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME} --convdir=CIconv_${CASENAME}"
    - ${PYTEST_EXEC_CMD} --log-file=log_pytest_conv.txt -m "${PYTEST_MARKER_OPTS} and converter_stage and (not restart)" -k "not highres" $PYTEST_DIR_OPTS --junitxml=pytest.xml --dry-run
    - rm -rf CIconv_${CASENAME}
    - echo -e "\e[0Ksection_end:`date +%s`:pre-conv\r\e[0K"
    # CONVERTER TESTS
    - echo -e "\e[0Ksection_start:`date +%s`:conv[collapsed=true]\r\e[0K converter Postprocessing"
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_conv.txt
      -m "${PYTEST_MARKER_OPTS} and converter_stage and (not restart)"
      -k "not highres and not frenet"
      $PYTEST_DIR_OPTS
      --junitxml=pytest.xml
      --annotations=annotations.json
      # <==== -k"not frenet": FRENET HMAP NOT YET WORKING WITH CONVERTERS, NEED TO READ PARAMETER FROM PARAMETER.INI
    - echo -e "\e[0Ksection_end:`date +%s`:conv\r\e[0K"
  artifacts:
    name: "${CI_PIPELINE_ID}_conv_${CASENAME}"
    paths:
      - log_pytest_conv.txt
      - CIconv_${CASENAME}
    expire_in: 1 week
    when: always
    reports:
      junit: pytest.xml
      annotations: annotations.json


# =================================================================================================================================
# TEMPLATES FOR STAGE "publish"
# =================================================================================================================================

.script_publish_gitlab:
  variables:
    BUILDNAME: ${HASH_TAG}_pip
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
  script:
    - source venv_${BUILDNAME}/bin/activate
    - pip install twine build
    - python -m build --sdist
    - python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  artifacts:
    expire_in: 1 week
    paths:
      - dist
    when: always
