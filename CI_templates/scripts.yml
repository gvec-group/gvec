# SCRIPT TEMPLATES
# This file contains the templates for the scripts that are used in the CI pipeline.
# =================================================================================================================================


# =================================================================================================================================
# TEMPLATES INDEPENDENT OF STAGE
# =================================================================================================================================

# execute the bash script in `CI_setup` to setup the environment, e.g. by loading modules
.before_script_modules:
  before_script:
    - source CI_templates/helpers.bash
    - start_details setup-env "Setup Environment"
    - echo ${CMAKE_HOSTNAME} ${SETUP_SCRIPT} ${CURR_CMP}
    - if [ ${SETUP_SCRIPT} != "none" ]; then source ./CI_setup/${CMAKE_HOSTNAME}_setup_${SETUP_SCRIPT}; fi
    - echo "Fortran compiler is ${FC}"
    - git status
    - end_details setup-env

.after_script_basic:
  after_script:
    - echo "CI_JOB_STATUS is ${CI_JOB_STATUS}"
    - if [[ "${CI_JOB_NAME}" = *"_slurm"* ]]; then sacct --name ${SLURM_JOB_NAME} -o JobID,JobName,State,NNodes,NCPUS,NTasks; fi

# =================================================================================================================================
# TEMPLATES FOR STAGE "env" (printout the environment for future reference)
# =================================================================================================================================

.script_env:
  script:
    - echo "Pipeline environment for branch $CI_COMMIT_REF_NAME and tag $HASH_TAG_REFERENCE"
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - start_details env "Environment Variables"
    - printenv
    - end_details env
    - echo $OMP_NUM_THREADS
    - echo $SHELL
    - ls -las
    - date


# =================================================================================================================================
# TEMPLATES FOR STAGE "build"
# =================================================================================================================================

.script_build:
  script:
    - start_details pre-build "Prepare Build"
    - pwd
    - echo "Building on branch ${HASH_TAG} with ${CURR_CMP} in ${CMP_MODE} mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "is ${HASH_TAG} the same as ${CI_COMMIT_REF_NAME}?"
    - if [ ${HASH_TAG} != ${CI_COMMIT_REF_NAME} ]; then git fetch --tags; git restore . ; git checkout ${HASH_TAG}; git pull; fi
    - git tag
    - echo "DRY-RUN OF THE FULL PYTEST CALL"
    - python --version
    - python -m pytest --version
    - mkdir _dry_run
    - start_details pytest-dryrun "Pytest dry-run"
    - ${PYTEST_EXEC_CMD} --log-file=log_dryrun.txt --rundir=_dry_run --refdir=_dry_run --postdir=_dry_post --dry-run
    - end_details pytest-dryrun
    - rm -rf _dry_*
    - echo "BUILDNAME is ${BUILDNAME}"
    - rm -rf build_${BUILDNAME}; mkdir -p build_${BUILDNAME}
    - cd build_${BUILDNAME}; pwd
    - end_details pre-build
    # BUILD
    - start_details cmake "CMake"
    - echo "cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} ${CMAKE_DEF_OPTS} ../."
    - cmake -DCMAKE_HOSTNAME=${CMAKE_HOSTNAME} -DCMAKE_BUILD_TYPE=${CMP_MODE} -DUSE_OPENMP=${OMP_MODE:3} -DUSE_MPI=${MPI_MODE:3} ${CMAKE_DEF_OPTS} ../. |tee ../log_${BUILDNAME}_cmake.txt
    - end_details cmake
    - start_details make "Make"
    - make -j VERBOSE=1 |tee ../log_${BUILDNAME}_make.txt
    - end_details make
    - cd ..; echo "... BUILD PHASE FINISHED!"
  artifacts:
    name: "build_${CI_PIPELINE_ID}_${CI_JOB_ID}_${BUILDNAME}"
    paths:
      - build_${BUILDNAME}
      - log_${BUILDNAME}_*.txt
    expire_in: 3 days
    when: always

.script_build_py:
  script:
    - start_details pre-build "Prepare Build"
    - pwd
    # Debug Information
    - echo "Building on branch ${HASH_TAG} with ${CURR_CMP} in ${CMP_MODE} mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}"
    - export SKBUILD_CMAKE_BUILD_TYPE=${CMP_MODE}
    - export SKBUILD_CMAKE_DEFINE="USE_OPENMP=${OMP_MODE:3};USE_MPI=${MPI_MODE:3}"
    - echo "CMAKE_HOSTNAME is ${CMAKE_HOSTNAME}"
    - echo "is ${HASH_TAG} the same as ${CI_COMMIT_REF_NAME}?"
    - if [ ${HASH_TAG} != ${CI_COMMIT_REF_NAME} ]; then git fetch --tags; git restore . ; git checkout ${HASH_TAG}; fi
    - git tag
    - python --version
    - echo "BUILDNAME is ${BUILDNAME}"
    # Create Virtual Environment
    - rm -rf venv_${BUILDNAME}
    - python -m venv venv_${BUILDNAME}
    - source venv_${BUILDNAME}/bin/activate
    - which python
    - which pip
    - pip list
    - start_details printenv "Environment Variables"
    - printenv
    - end_details printenv
    - end_details pre-build
    # BUILD
    - start_details pip "Pip install"
    - pip install .[dev] -v |& tee log_${BUILDNAME}.txt
    - pip list
    - end_details pip
    - echo "... BUILD PHASE FINISHED!"
    # Check for successful installation
    - start_details run "Preliminary pytest"
    - which pytest
    - pytest
      -m "unit"
      -k "version"
      -v -rA
      --junitxml=pytest.xml
    - end_details run
  artifacts:
    name: "${CI_PIPELINE_ID}_build_${BUILDNAME}"
    paths:
      - venv_${BUILDNAME}
      - log_${BUILDNAME}_*.txt
    expire_in: 3 days
    when: always
    reports:
      junit:
        - pytest.xml

# =================================================================================================================================
# TEMPLATES FOR STAGE "run"
# =================================================================================================================================

# also required in "post"
.before_script_exportvars:
  before_script:
    - source CI_templates/helpers.bash
    - start_details exportvars "Export environment variables"
    - if [[ "${CI_JOB_NAME}" = *"_slurm"* ]]; then
        export RUN_PRFX="srun --immediate=${SRUN_TIMEOUT}";
      else
        if [ ${MPI_MODE} = 'mpiON' ]; then export RUN_PRFX="mpirun -np ${MPI_RNKS}"; else export RUN_PRFX=""; fi
      fi
    - if [ ${OMP_MODE} = 'ompON' ]; then export OMP_NUM_THREADS=${OMP_NUM_THR}; fi
    - echo "hostname:" $HOSTNAME
    - echo "HASH_TAG is ${HASH_TAG}"
    - echo "BUILDNAME is ${BUILDNAME} >> build_${BUILDNAME}/"
    - echo "CASENAME is ${CASENAME} >> CIrun_${CASENAME}/"
    - echo "Running with ${CURR_CMP} in $CMP_MODE mode, OMP=${OMP_MODE:3} and MPI=${MPI_MODE:3}";
    - echo "Run prefix:" ${RUN_PRFX}
    - if [[ "${CI_JOB_NAME}" = *"_slurm"* ]]; then
        echo "SLURM_JOB_NAME:" ${SLURM_JOB_NAME};
        echo "SLURM_TIMELIMIT:" ${SLURM_TIMELIMIT} "minutes";
        echo "SRUN_TIMEOUT:" ${SRUN_TIMEOUT} "seconds";
        echo "SLURM_MEM_PER_NODE:" ${SLURM_MEM_PER_NODE};
        echo "SLURM_NNODES:" ${SLURM_NNODES};
        echo "SLURM_NTASKS_PER_NODE:" ${SLURM_NTASKS_PER_NODE};
        echo "SLURM_CPUS_PER_TASK:" ${SLURM_CPUS_PER_TASK};
        echo "SLURM_NTASKS_PER_CORE:" ${SLURM_NTASKS_PER_CORE};
        echo "OpenMP number of threads:" $OMP_NUM_THREADS ", should be =" ${OMP_NUM_THR};
      fi
    - python --version
    - python -m pytest --version
    - end_details exportvars

.script_run:
  script:
    - start_details pre-run "Prepare Run"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME}"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --run-prefix "${RUN_PRFX}" --dry-run
    # avoid submission of SLURM jobs for the --dry-run by removing the --run-prefix argument
    -      ${PYTEST_EXEC_CMD} --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --dry-run
    - rm -rf CIrun_${CASENAME}
    - end_details pre-run
    # RUN
    - start_details run "Run"
    - echo "OpenMP number of threads:" $OMP_NUM_THREADS
    # pytest: no restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_norestart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --run-prefix "${RUN_PRFX}"
      --junitxml=pytest.xml
      --annotations=annotations.json
    # pytest: restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_restart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and restart"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --run-prefix "${RUN_PRFX}"
      --junitxml=pytest-restart.xml
      --annotations=annotations.json
    - end_details run
  artifacts:
    name: "run_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME}"
    paths:
      - log_pytest_run_norestart.txt
      - log_pytest_run_restart.txt
      - CIrun_${CASENAME}
    expire_in: 3 days
    when: always
    reports:
      junit:
        - pytest.xml
        - pytest-restart.xml
      annotations:
        - annotations.json

.script_run_py:
  script:
    - start_details pre "Activate Environment"
    - echo "Buildname:" ${BUILDNAME}
    - source venv_${BUILDNAME}/bin/activate
    - module list || echo "No modules available"
    - pip list
    - end_details pre
    # dry-run
    - start_details pre-run "Prepare Run"
    - export PYTEST_DIR_OPTS="--builddir=venv_${BUILDNAME} --rundir=CIrun_${CASENAME}"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --run-prefix "${RUN_PRFX}" --dry-run
    # avoid submission of SLURM jobs for the --dry-run by removing the --run-prefix argument
    -      ${PYTEST_EXEC_CMD} --log-file=log_pytest_run_norestart.txt -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)" $PYTEST_DIR_OPTS -k "${PYTEST_KEY_OPTS}" --dry-run
    - rm -rf CIrun_${CASENAME}
    - end_details pre-run
    # RUN
    - start_details run "Run"
    - echo "OpenMP number of threads:" $OMP_NUM_THREADS
    # pytest: no restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_norestart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and (not restart)"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --run-prefix "${RUN_PRFX}"
      --junitxml=pytest.xml
      --annotations=annotations.json
    # pytest: restart
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_run_restart.txt
      -m "${PYTEST_MARKER_OPTS} and run_stage and restart"
      $PYTEST_DIR_OPTS
      -k "${PYTEST_KEY_OPTS}"
      --run-prefix "${RUN_PRFX}"
      --junitxml=pytest-restart.xml
      --annotations=annotations.json
    - end_details run
  artifacts:
    name: "run_py_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME}"
    paths:
      - log_pytest_run_norestart.txt
      - log_pytest_run_restart.txt
      - CIrun_${CASENAME}
    expire_in: 3 days
    when: always
    reports:
      junit:
        - pytest.xml
        - pytest-restart.xml
      annotations:
        - annotations.json

# =================================================================================================================================
# TEMPLATES FOR STAGE "unit"
# =================================================================================================================================

.script_unit:
  script:
    - start_details pre "Preparation"
    - echo "Buildname:" ${BUILDNAME}
    - source venv_${BUILDNAME}/bin/activate
    - module list || echo "No modules available"
    - pip list
    - end_details pre
    # RUN
    - start_details run "Unit"
    - which pytest
    - pytest
      -m "unit"
      -v -rA
      --junitxml=pytest.xml
      --require-pygvec
    - end_details run
  artifacts:
    reports:
      junit:
        - pytest.xml

# =================================================================================================================================
# TEMPLATES FOR STAGE "regression"
# =================================================================================================================================

.script_regression:
  script:
    - start_details pre-reg "Prepare Regression"
    - python --version
    - python -m pytest --version
    - echo $SHELL
    - set +e #continue script after command fails, gitlab otherwise only returns 0 or 1
    - echo CIrun_${CASENAME_1}
    - echo CIrun_${CASENAME_2}
    - export PYTEST_DIR_OPTS="--rundir=CIrun_${CASENAME_1} --refdir=CIrun_${CASENAME_2}"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --dry-run
    -      ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --dry-run
    - end_details pre-reg
    - start_details regression "Regression"
    - echo ${PYTEST_EXEC_CMD} --log-file=log_pytest_regression.txt -m "${PYTEST_MARKER_OPTS} and regression_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS "${PYTEST_EXTRA_OPTS}" --junitxml=pytest.xml
    # pytest: regression
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_regression.txt
      -m "${PYTEST_MARKER_OPTS} and regression_stage"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      "${PYTEST_EXTRA_OPTS}"
      --junitxml=pytest.xml
      --annotations=annotations.json
      || RET=$?
    - end_details regression
    - exit $RET
  artifacts:
    name: "reg_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME_1}_vs_${CASENAME_2}"
    paths:
      - log_pytest_regression.txt
      - CIrun_${CASENAME_1}
      - CIrun_${CASENAME_2}
    expire_in: 3 days
    when: always #on_failure
    reports:
      junit: pytest.xml
      annotations: annotations.json
# =================================================================================================================================
# TEMPLATES FOR STAGE "postprocessing" + "converter"
# =================================================================================================================================

.script_post:
  script:
    - start_details pre-post "Prepare Postprocessing"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME} --postdir=CIpost_${CASENAME}"
    - ${PYTEST_EXEC_CMD} --log-file=log_pytest_post.txt -m "${PYTEST_MARKER_OPTS} and post_stage" -k "${PYTEST_KEY_OPTS}" $PYTEST_DIR_OPTS --junitxml=pytest.xml --dry-run
    - rm -rf CIpost_${CASENAME}
    - end_details pre-post
    # POST
    - start_details post "Postprocessing"
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_post.txt
      -m "${PYTEST_MARKER_OPTS} and post_stage"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      --junitxml=pytest.xml
      --annotations=annotations.json
    - end_details post
  artifacts:
    name: "post_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME}"
    paths:
      - log_pytest_post.txt
      - CIpost_${CASENAME}
    expire_in: 3 days
    when: always
    reports:
      junit: pytest.xml
      annotations: annotations.json

.script_conv:
  script:
    - start_details pre-conv "Prepare converter Postprocessing"
    - export PYTEST_DIR_OPTS="--builddir=build_${BUILDNAME} --rundir=CIrun_${CASENAME} --postdir=CIpost_${CASENAME}"
    - ${PYTEST_EXEC_CMD} --log-file=log_pytest_conv.txt -m "${PYTEST_MARKER_OPTS} and converter_stage and not restart and not pygvec" -k "not highres" $PYTEST_DIR_OPTS --junitxml=pytest.xml --dry-run
    - rm -rf CIpost_${CASENAME}
    - end_details pre-conv
    # CONVERTER TESTS
    - start_details conv "converter Postprocessing"
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest_conv.txt
      -m "${PYTEST_MARKER_OPTS} and converter_stage and not restart and not pygvec"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      --junitxml=pytest.xml
      --annotations=annotations.json
      # <==== -k"not frenet": FRENET HMAP NOT YET WORKING WITH CONVERTERS, NEED TO READ PARAMETER FROM PARAMETER.INI
    - end_details conv
  artifacts:
    name: "conv_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME}"
    paths:
      - log_pytest_conv.txt
      - CIpost_${CASENAME}
    expire_in: 3 days
    when: always
    reports:
      junit: pytest.xml
      annotations: annotations.json

.script_post_py:
  script:
    - export PYTEST_DIR_OPTS="--builddir=venv_${BUILDNAME} --rundir=CIrun_${CASENAME} --postdir=CIpost_${CASENAME}"
    # POST & CONVERTER TESTS
    - start_details post "Test Converters"
    - rm -rf CIpost_${CASENAME}
    - ${PYTEST_EXEC_CMD}
      --log-file=log_pytest.txt
      -m "${PYTEST_MARKER_OPTS} and converter_stage"
      -k "${PYTEST_KEY_OPTS}"
      $PYTEST_DIR_OPTS
      --junitxml=pytest.xml
      --annotations=annotations.json
    - end_details post
  artifacts:
    name: "post-py_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME}"
    paths:
      - log_pytest.txt
      - CIpost_${CASENAME}
    expire_in: 3 days
    when: always
    reports:
      junit: pytest.xml
      annotations: annotations.json


.script_post_ncdiff:
  script:
    - start_details pre-ncdiff "Prepare python recursive ncdiff"
    - python --version
    - python -m pytest --version
    - echo $SHELL
    - export NCDIFF_TOL="--rtol 1e-6  --atol 1e-8"
    - set +e #continue script after command fails, gitlab otherwise only returns 0 or 1
    - echo CIpost_${CASENAME_1}
    - echo CIpost_${CASENAME_2}
    - python -m venv .venv_post_ncdiff
    - source .venv_post_ncdiff/bin/activate
    - pip install recursive_diff netcdf4 dask
    - end_details pre-ncdiff
    - start_details ncdiff "ncdiff"
    - ncdiff -r -b -m **/POST_*.nc $NCDIFF_TOL CIpost_${CASENAME}/post CIpost_${CASENAME_2}/post
      || RET=$?
    - ncdiff -r -q -m **/POST_*_visu_*.nc   $NCDIFF_TOL CIpost_${CASENAME}/post CIpost_${CASENAME_2}/post > log_post_ncdiff_visu_.txt
    - ncdiff -r -q -m **/POST_*_pest_*.nc   $NCDIFF_TOL CIpost_${CASENAME}/post CIpost_${CASENAME_2}/post > log_post_ncdiff_pest_.txt
    - ncdiff -r -q -m **/POST_*_boozer_*.nc $NCDIFF_TOL CIpost_${CASENAME}/post CIpost_${CASENAME_2}/post > log_post_ncdiff_boozer_.txt
    - end_details ncdiff
    - exit $RET
    - deactivate
    - rm -rf .venv_post_ncdiff
  artifacts:
    name: "ncdiff_${CI_PIPELINE_ID}_${CI_JOB_ID}_${CASENAME_1}_vs_${CASENAME_2}"
    paths:
      - log_post_ncdiff_*.txt
    expire_in: 3 days
    when: always
# =================================================================================================================================
# TEMPLATES FOR STAGE "publish"
# =================================================================================================================================

.script_publish_pypi:
  variables:
    BUILDNAME: ${HASH_TAG}_pip
    TWINE_USERNAME: ${PYPI_USERNAME}
    TWINE_PASSWORD: ${PYPI_PASSWORD}
  script:
    - source venv_${BUILDNAME}/bin/activate
    - pip install twine build
    - python -m build --sdist
    - python -m twine upload dist/*
  artifacts:
    expire_in: 3 days
    paths:
      - dist
    when: always
