ProjectName:
  category:
  - Initialization
  description:
  - Project name, used for all output files, must be a string without spaces
  default: '`GVEC`'
  type: '`string`'
  allowed: ''
whichInitEquilibrium:
  category:
  - Initialization
  subtitle: mandatory
  required: true
  description:
  - How initial guess is computed. Either from boundary and axis parameters, or from
    VMEC file.
  type: '`integer`'
  allowed_table:
  - - '`0`'
    - from axis and boundary parameters
  - - '`1`'
    - from VMEC file, **needs:** lnk_to_param(VMECwoutfile)
nfp:
  category:
  - Discretization
  subtitle: mandatory parameter
  required: true
  description:
  - This parameter sets the number of field periods $N_{FP}$
  type: '`integer`'
  allowed: $> 0$
X1_mn_max:
  category:
  - Discretization
  subtitle: mandatory if `whichInitEquilibrium=0`
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets maximum poloidal and toroidal mode numbers $m_\text{max}$,$n_\text{max}$
    of the variable$X^1$
  - Overwrites the default, which is only set if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium)
    (initialize with VMEC file).
  type: array of `integer` of size 2
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium)
  default: only if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the
    default is set to the maximum mode numbers from the VMEC solution file.
  allowed: $m_\text{max}\gt 0,n_\text{max}\ge 0$
X2_mn_max:
  category:
  - Discretization
  subtitle: mandatory if `whichInitEquilibrium=0`
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets maximum poloidal and toroidal mode numbers $m_\text{max}$,$n_\text{max}$
    of the variable$X^2$
  - Overwrites the default, which is only set if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium)
    (initialize with VMEC file).
  type: array of `integer` of size 2
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium)
  default: only if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the
    default is set to the maximum mode numbers from the VMEC solution file.
  allowed: $m_\text{max}\gt 0,n_\text{max}\ge 0$
LA_mn_max:
  category:
  - Discretization
  subtitle: mandatory if `whichInitEquilibrium=0`
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets maximum poloidal and toroidal mode numbers $m_\text{max}$,$n_\text{max}$
    of the variable$\lambda$
  - Overwrites the default, which is only set if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium)
    (initialize with VMEC file).
  type: array of `integer` of size 2
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium)
  default: only if lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the
    default is set to the maximum mode numbers from the VMEC solution file.
  allowed: $m_\text{max}\gt 0,n_\text{max}\ge 0$
X1_sin_cos:
  category:
  - Discretization
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets which Fourier modes are active for the variable$X^1$, thus
    allows to impose stellarator symmetry.
  type: '`string`'
  default: '`_cos_` if lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
    Ff lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the default is
    set from the VMEC solution.'
  allowed_table:
  - &id001
    - '`_sin_`'
    - only use $\sin(m\vartheta-n\zeta)$, with $\{m=0,1\leq n\leq n_\text{max}\,\,
      1\leq m\leq m_\text{max},-n_\text{max}\leq n\leq n_\text{max}\}$
  - &id002
    - '`_cos_`'
    - only use $\cos(m\vartheta-n\zeta)$, with $\{m=0,0\leq n\leq n_\text{max}\,;
      \,1\leq m\leq m_\text{max},-n_\text{max}\leq n\leq n_\text{max}\}$
  - &id003
    - '`_sincos_`'
    - use both sine and cosine modes
X2_sin_cos:
  category:
  - Discretization
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets which Fourier modes are active for the variable$X^2$, thus
    allows to impose stellarator symmetry.
  type: '`string`'
  default: '`_sin_` if lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
    Ff lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the default is
    set from the VMEC solution.'
  allowed_table:
  - *id001
  - *id002
  - *id003
LA_sin_cos:
  category:
  - Discretization
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets which Fourier modes are active for the variable$\lambda$,
    thus allows to impose stellarator symmetry.
  type: '`string`'
  default: '`_sin_` if lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
    Ff lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium), the default is
    set from the VMEC solution.'
  allowed_table:
  - *id001
  - *id002
  - *id003
X1X2_deg:
  category:
  - Discretization
  subtitle: mandatory parameter
  required: true
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets the polynomial degree $p$ of the B-Spline, for the variables
    $X^1,X^2$.
  type: '`integer`'
  allowed: $>0$
X1X2_continuity:
  category:
  - Discretization
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets the continuity of the B-Spline, for the variables $X^1,X^2$.
  - For now, only a continuity of  $p-1$  is possible, with $p$ from lnk_to_param(X1X2_deg).
  type: '`integer`'
  default: lnk_to_param(`X1X2_deg-1`|X1X2_deg)
  allowed: $\geq 0$
LA_deg:
  category:
  - Discretization
  subtitle: mandatory parameter
  required: true
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets the polynomial degree $p$ of the B-Spline, for the variable
    $\lambda$.
  type: '`integer`'
  allowed: $>0$
LA_continuity:
  category:
  - Discretization
  description:
  - The solution is described by three variables $X^1,X^2,\lambda$ with a B-Spline
    discretization in radial direction$\rho$ and a double-periodic Fourier series
    in the poloidal angle $\vartheta$ and the toroidal angle $\zeta$.
  - This parameter sets the continuity of the B-Spline, for the variable $\lambda$.
  - For now, only a continuity of  $p-1$  is possible, with $p$ from lnk_to_param(LA_deg).
  type: '`integer`'
  default: lnk_to_param(`LA_deg-1`|LA_deg)
  allowed: $\geq 0$
X1_b_cos(m;n):
  category:
  - boundary
  linkname: X1_b_cos
  description:
  - The boundary is described by two variables $X^1(\vartheta,\zeta)$,$X^2(\vartheta,\zeta)$,
    as a double-periodic Fourier series.
  - This parameter sets the coefficient of the Fourier mode of $X^1$ variable, with
    basis function $\cos(m\vartheta-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - In `(m;n)`, `m` and `n` must be set to the actual poloidal ($m$) and toroidal
    ($n$) mode number (excluding the $N_{FP}$ factor).
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_cos_`|X1_sin_cos)
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X1_b_sin(m;n):
  category:
  - boundary
  linkname: X1_b_sin
  description:
  - The boundary is described by two variables $X^1(\vartheta,\zeta)$,$X^2(\vartheta,\zeta)$,
    as a double-periodic Fourier series.
  - This parameter sets the coefficient of the Fourier mode of $X^1$ variable, with
    basis function $\sin(m\vartheta-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - In `(m;n)`, `m` and `n` must be set to the actual poloidal ($m$) and toroidal
    ($n$) mode number (excluding the $N_{FP}$ factor).
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_sin_`|X1_sin_cos)
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X2_b_cos(m;n):
  category:
  - boundary
  linkname: X2_b_cos
  description:
  - The boundary is described by two variables $X^1(\vartheta,\zeta)$,$X^2(\vartheta,\zeta)$,
    as a double-periodic Fourier series.
  - This parameter sets the coefficient of the Fourier mode of $X^2$ variable, with
    basis function $\cos(m\vartheta-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - In `(m;n)`, `m` and `n` must be set to the actual poloidal ($m$) and toroidal
    ($n$) mode number (excluding the $N_{FP}$ factor).
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_cos_`|X2_sin_cos)
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X2_b_sin(m;n):
  category:
  - boundary
  linkname: X2_b_sin
  description:
  - The boundary is described by two variables $X^1(\vartheta,\zeta)$,$X^2(\vartheta,\zeta)$,
    as a double-periodic Fourier series.
  - This parameter sets the coefficient of the Fourier mode of $X^2$ variable, with
    basis function $\sin(m\vartheta-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - In `(m;n)`, `m` and `n` must be set to the actual poloidal ($m$) and toroidal
    ($n$) mode number (excluding the $N_{FP}$ factor).
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_sin_`|X2_sin_cos)
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
init_average_axis:
  category:
  - boundary
  description:
  - Instead of a prescribed initial axis guess, via lnk_to_param(X1_a_cos),lnk_to_param(X2_a_sin)...,
    use the boundary data of each $(X^1,X^2)$ cross-section and compute the center
    of the area.
  type: '`logical`'
  allowed: '`True` or `False`'
  default: '`False`'
average_axis_move_X1:
  category:
  - boundary
  description:
  - Offset the axis in $X^{xd}$ direction, from the position found by the average
    lnk_to_param(`init_average_axis=True`|init_average_axis)
  type: '`real`'
  default: '`0.0`'
average_axis_move_X2:
  category:
  - boundary
  description:
  - Offset the axis in $X^{xd}$ direction, from the position found by the average
    lnk_to_param(`init_average_axis=True`|init_average_axis)
  type: '`real`'
  default: '`0.0`'
X1_a_cos(0;n):
  category:
  - boundary
  linkname: X1_a_cos
  description:
  - This parameter sets the Fourier mode of the initial axis guess for the $X^1$ variable,
    with basis function $\cos(-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - in `(0;n)`, `n` must be set to the actual toroidal  mode number $n$ (excluding
    the $N_{FP}$ factor).
  - 'The maximum mode number $n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_cos_`|X1_sin_cos),
  - also ignored if lnk_to_param(`init_average_axis=True`|init_average_axis).
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{0\le n\le n_\text{max}\}$
X1_a_sin(0;n):
  category:
  - boundary
  linkname: X1_a_sin
  description:
  - This parameter sets the Fourier mode of the initial axis guess for the $X^1$ variable,
    with basis function $\sin(-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - in `(0;n)`, `n` must be set to the actual toroidal  mode number $n$ (excluding
    the $N_{FP}$ factor).
  - 'The maximum mode number $n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_sin_`|X1_sin_cos),
  - also ignored if lnk_to_param(`init_average_axis=True`|init_average_axis).
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{0\le n\le n_\text{max}\}$
X2_a_cos(0;n):
  category:
  - boundary
  linkname: X2_a_cos
  description:
  - This parameter sets the Fourier mode of the initial axis guess for the $X^2$ variable,
    with basis function $\cos(-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - in `(0;n)`, `n` must be set to the actual toroidal  mode number $n$ (excluding
    the $N_{FP}$ factor).
  - 'The maximum mode number $n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_cos_`|X2_sin_cos),
  - also ignored if lnk_to_param(`init_average_axis=True`|init_average_axis).
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{0\le n\le n_\text{max}\}$
X2_a_sin(0;n):
  category:
  - boundary
  linkname: X2_a_sin
  description:
  - This parameter sets the Fourier mode of the initial axis guess for the $X^2$ variable,
    with basis function $\sin(-n N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - in `(0;n)`, `n` must be set to the actual toroidal  mode number $n$ (excluding
    the $N_{FP}$ factor).
  - 'The maximum mode number $n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_sin_`|X2_sin_cos),
  - also ignored if lnk_to_param(`init_average_axis=True`|init_average_axis).
  required_if: lnk_to_param(`whichInitEquilibrium=0`|whichInitEquilibrium).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{0\le n\le n_\text{max}\}$
boundary_perturb:
  category:
  - boundary
  description:
  - 'Add boundary perturbations to intial state, also after a restart. '
  type: '`logical`'
  allowed: '`True` or `False`'
  default: '`False`'
X1pert_b_cos(m,n):
  category:
  - boundary
  linkname: X1pert_b_cos
  description:
  - This parameter sets the coefficient of the Fourier mode that is added as a perturbation
    at the boundary, for the $X^1$ variable, with basis function $\cos(m\vartheta-n
    N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - '`m,n` must be replaced by the poloidal ($m$) and toroidal ($n$) mode number (excluding
    the $N_{FP}$ factor).'
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_cos_`|X1_sin_cos)
  required_if: lnk_to_param(`boundary_perturb=True`|boundary_perturb).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X1pert_b_sin(m,n):
  category:
  - boundary
  linkname: X1pert_b_sin
  description:
  - This parameter sets the coefficient of the Fourier mode that is added as a perturbation
    at the boundary, for the $X^1$ variable, with basis function $\sin(m\vartheta-n
    N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - '`m,n` must be replaced by the poloidal ($m$) and toroidal ($n$) mode number (excluding
    the $N_{FP}$ factor).'
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X1_mn_max). '
  - ignored if lnk_to_param(`X1_sin_cos=_sin_`|X1_sin_cos)
  required_if: lnk_to_param(`boundary_perturb=True`|boundary_perturb).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X2pert_b_cos(m,n):
  category:
  - boundary
  linkname: X2pert_b_cos
  description:
  - This parameter sets the coefficient of the Fourier mode that is added as a perturbation
    at the boundary, for the $X^2$ variable, with basis function $\cos(m\vartheta-n
    N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - '`m,n` must be replaced by the poloidal ($m$) and toroidal ($n$) mode number (excluding
    the $N_{FP}$ factor).'
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_cos_`|X2_sin_cos)
  required_if: lnk_to_param(`boundary_perturb=True`|boundary_perturb).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
X2pert_b_sin(m,n):
  category:
  - boundary
  linkname: X2pert_b_sin
  description:
  - This parameter sets the coefficient of the Fourier mode that is added as a perturbation
    at the boundary, for the $X^2$ variable, with basis function $\sin(m\vartheta-n
    N_{FP}\zeta)$. The number of field periods lnk_to_param($N_{FP}$|nfp).
  - '`m,n` must be replaced by the poloidal ($m$) and toroidal ($n$) mode number (excluding
    the $N_{FP}$ factor).'
  - 'The maximum mode number $m_\text{max}$,$n_\text{max}$ is provided by lnk_to_param(X2_mn_max). '
  - ignored if lnk_to_param(`X2_sin_cos=_sin_`|X2_sin_cos)
  required_if: lnk_to_param(`boundary_perturb=True`|boundary_perturb).
  default: '`0`'
  type: '`real`'
  allowed: Coefficients are read for mode numbers $\{m=0,0\le n\le n_\text{max}\}$
    and $\{1\le m\le m_\text{max},-n_\text{max}\le n\le n_\text{max}\}$
GetBoundaryFromFile:
  category:
  - boundary
  description:
  - "Instead of providing fourier modes for the boundary $X^1,X^2$, use a dataset\
    \ stored in a netcdf file that contains the $X^1,X^2$ positions on a regular grid\
    \ in $\vartheta,\\zeta$."
  type: '`integer`'
  allowed_table:
  - - '`-1`'
    - 'off'
  - - '`1`'
    - read from specific netcdf file
  default: '`-1`'
boundary_filename:
  category:
  - boundary
  description:
  - Full file name of the boundary data netcdf file.
  required_if: lnk_to_param(`GetBoundaryFromFile=1`|GetBoundaryFromFile)
  type: '`string`'
scale_minor_radius:
  category:
  - boundary
  description:
  - scale $X^1, X^2$ boundary data from file by a constant factor. The parameter is
    used in combination with the G-Frame hmap, where the boundary is typically centered
    around $X^1=X^2=0$.
  required_if: lnk_to_param(`GetBoundaryFromFile=1`|GetBoundaryFromFile)
  type: '`real`'
  default: '1.0'
VMECwoutfile:
  category:
  - Initialization
  - VMEC
  description:
  - full file name of vmec solution file, either as netcdf or as nemec output,
  - '**needs** lnk_to_param(VMECwoutfile_format)'
  required_if: lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium)
  type: '`string`'
VMECwoutfile_format:
  category:
  - Initialization
  - VMEC
  description:
  - Choose which VMEC wout file format, either netcdf or ascii/binary format from
    NEMEC
  - The filename is specified in lnk_to_param(VMECwoutfile)
  required_if: lnk_to_param(`whichInitEquilibrium=1`|whichInitEquilibrium)
  type: '`string`'
  allowed_table:
  - - '`0`'
    - netcdf format
  - - '`1`'
    - ascii format from older vmec (nemec)
  - - '`2`'
    - binary format from older vmec (nemec)
  default: '`0`'
PhiEdge:
  category:
  - profiles
  description:
  - Total toroidal magnetic flux $\Phi$ at the boundary. Defines the $\Phi$ profile.
    A positive sign means that the toroidal magnetic field points in positive $\zeta$
    direction.
  - Note that internally, GVEC then uses $\Phi_\text{edge}/(2\pi)$.
  type: '`real`'
  default: '`1.0`'
iota_type:
  category:
  - profiles
  subtitle: mandatory if `whichInitEquilibrium=0`
  required_if: '`whichInitEquilibrium=0`'
  description:
  - Type of profile to represent the rotational transform `iota(s)`. Can be a polynomial,
    B-Spline or a set of points which is then interpolated
  - '**Note:** the profile is always given as a function of the normalized magnetic
    flux $s$, with $s=0$ as the magnetic axis, and $s=1$ at the boundary. The normalized
    radius-like coordinate is $\rho=\sqrt{s}$.'
  type: '`string`'
  allowed_table:
  - - '`polynomial`'
    - polynomial represenation, **needs** lnk_to_param(iota_coefs)
  - - '`bspline`'
    - B-Spline representation, **needs** lnk_to_param(iota_coefs) and lnk_to_param(iota_knots)
  - - '`interpolation`'
    - Cubic spline interpolation from point values at s-positions, **needs** lnk_to_param(iota_rho2)
      and lnk_to_param(iota_vals)
iota_coefs:
  category:
  - profiles
  description:
  - 'Depending on the type of profile of the rotational transform `iota(s)`:'
  - '- if lnk_to_param(`iota_type=polynomial`|iota_type), it sets the coefficients
    $c_0 + c_1 s + c_2 s^2 \dots$'
  - '- if lnk_to_param(`iota_type=bspline`|iota_type), these are the B-Spline coefficients
    (which need to be compatible to the knots lnk_to_param(iota_knots))'
  type: array of `real` of any size
  required_if: lnk_to_param(iota_type) is `polynomial` or `bspline`
iota_knots:
  category:
  - profiles
  description:
  - 'Required for the B-Spline profile of the rotational transform `iota(s)`:'
  - The knots must be in the range of $s=[0,1]$ and must be monotonically increasing.
  - They must have the same multiplicity of the first knot at $s=0$ and the last knot
    at $s=1$. The degree of the B-Spline is deduced from the multiplicity.
  - Knots need to be compatible with the B-Spline coefficients lnk_to_param(iota_coefs)
  type: array of `real` of any size
  required_if: lnk_to_param(iota_type) is `bspline`
iota_rho2:
  category:
  - profiles
  description:
  - 'Required for the cubic spline interpolation of the rotational transform `iota(s)`:'
  - These are the radial point positions, in the normalized magnetic flux
  - They must cover the range of $s=[0,1]$ and must be monotonically increasing.
  - Point positions must of same size as the values, specified by lnk_to_param(iota_vals)
  type: array of `real` of any size
  required_if: lnk_to_param(iota_type) is `interpolation`
iota_vals:
  category:
  - profiles
  description:
  - 'Required for the cubic spline interpolation of the rotational transform `iota(s)`:'
  - These are the values of `iota` at the radial point positions, in the normalized
    magnetic flux
  - Point positions must of same size as the values, specified by lnk_to_param(iota_rho2)
  type: array of `real` of any size
  required_if: lnk_to_param(iota_type) is `interpolation`
iota_BC_type_axis:
  category:
  - profiles
  description:
  - Boundary condition at $s=0$ for the cubic spline interpolation of the rotational
    transform `iota(s)`
  type: '`string`'
  allowed_table:
  - &id004
    - '`"not_a_knot"`'
    - Makes the third derivative continuous at the second grid point
  - - '`"1st_deriv"`'
    - Sets the first derivative at the boundary $s=0$, either to zero or to the provided
      first value of lnk_to_param(iota_BC_vals)
  - - '`"2nd_deriv"`'
    - Sets the second derivative at the boundary $s=0$, either to zero or to the provided
      first value of lnk_to_param(iota_BC_vals)
  required_if: lnk_to_param(iota_type) is `interpolation`
  default: '`"not_a_knot"`'
iota_BC_type_edge:
  category:
  - profiles
  description:
  - Boundary condition at $s=1$ for the cubic spline interpolation of the rotational
    transform `iota(s)`
  type: '`string`'
  allowed_table:
  - &id005
    - '`"not_a_knot"`'
    - Makes the third derivative continuous at the second to last grid point
  - - '`"1st_deriv"`'
    - Sets the first derivative at the boundary $s=1$, either to zero or to the provided
      second value of lnk_to_param(iota_BC_vals)
  - - '`"2nd_deriv"`'
    - Sets the second derivative at the boundary $s=0$, either to zero or to the provided
      second value of lnk_to_param(iota_BC_vals)
  required_if: lnk_to_param(iota_type) is `interpolation`
  default: '`"not_a_knot"`'
iota_BC_vals:
  category:
  - profiles
  description:
  - Values for the first / second derivative, at $s=0$ and $s=1$, for the cubic spline
    interpolation of the rotational transform `iota(s)`.
  type: array of `real` of size 2
  required_if: lnk_to_param(iota_type) is `interpolation` , and if lnk_to_param(iota_BC_type_axis)
    or lnk_to_param(iota_BC_type_edge) is different from `"not_a_knot"`
  default: '`(/0.0,0.0/))`'
iota_scale:
  category:
  - profiles
  description:
  - Scales the {proflong} `{prof}(s)` by a constant.
  - See profile definition lnk_to_param(iota_type)
  type: '`real`'
  default: '`1.0`'
pres_type:
  category:
  - profiles
  subtitle: mandatory if `whichInitEquilibrium=0`
  required_if: '`whichInitEquilibrium=0`'
  description:
  - Type of profile to represent the pressure `pres(s)`. Can be a polynomial, B-Spline
    or a set of points which is then interpolated
  - '**Note:** the profile is always given as a function of the normalized magnetic
    flux $s$, with $s=0$ as the magnetic axis, and $s=1$ at the boundary. The normalized
    radius-like coordinate is $\rho=\sqrt{s}$.'
  type: '`string`'
  allowed_table:
  - - '`polynomial`'
    - polynomial represenation, **needs** lnk_to_param(pres_coefs)
  - - '`bspline`'
    - B-Spline representation, **needs** lnk_to_param(pres_coefs) and lnk_to_param(pres_knots)
  - - '`interpolation`'
    - Cubic spline interpolation from point values at s-positions, **needs** lnk_to_param(pres_rho2)
      and lnk_to_param(pres_vals)
pres_coefs:
  category:
  - profiles
  description:
  - 'Depending on the type of profile of the pressure `pres(s)`:'
  - '- if lnk_to_param(`pres_type=polynomial`|pres_type), it sets the coefficients
    $c_0 + c_1 s + c_2 s^2 \dots$'
  - '- if lnk_to_param(`pres_type=bspline`|pres_type), these are the B-Spline coefficients
    (which need to be compatible to the knots lnk_to_param(pres_knots))'
  type: array of `real` of any size
  required_if: lnk_to_param(pres_type) is `polynomial` or `bspline`
pres_knots:
  category:
  - profiles
  description:
  - 'Required for the B-Spline profile of the pressure `pres(s)`:'
  - The knots must be in the range of $s=[0,1]$ and must be monotonically increasing.
  - They must have the same multiplicity of the first knot at $s=0$ and the last knot
    at $s=1$. The degree of the B-Spline is deduced from the multiplicity.
  - Knots need to be compatible with the B-Spline coefficients lnk_to_param(pres_coefs)
  type: array of `real` of any size
  required_if: lnk_to_param(pres_type) is `bspline`
pres_rho2:
  category:
  - profiles
  description:
  - 'Required for the cubic spline interpolation of the pressure `pres(s)`:'
  - These are the radial point positions, in the normalized magnetic flux
  - They must cover the range of $s=[0,1]$ and must be monotonically increasing.
  - Point positions must of same size as the values, specified by lnk_to_param(pres_vals)
  type: array of `real` of any size
  required_if: lnk_to_param(pres_type) is `interpolation`
pres_vals:
  category:
  - profiles
  description:
  - 'Required for the cubic spline interpolation of the pressure `pres(s)`:'
  - These are the values of `pres` at the radial point positions, in the normalized
    magnetic flux
  - Point positions must of same size as the values, specified by lnk_to_param(pres_rho2)
  type: array of `real` of any size
  required_if: lnk_to_param(pres_type) is `interpolation`
pres_BC_type_axis:
  category:
  - profiles
  description:
  - Boundary condition at $s=0$ for the cubic spline interpolation of the pressure
    `pres(s)`
  type: '`string`'
  allowed_table:
  - *id004
  - - '`"1st_deriv"`'
    - Sets the first derivative at the boundary $s=0$, either to zero or to the provided
      first value of lnk_to_param(pres_BC_vals)
  - - '`"2nd_deriv"`'
    - Sets the second derivative at the boundary $s=0$, either to zero or to the provided
      first value of lnk_to_param(pres_BC_vals)
  required_if: lnk_to_param(pres_type) is `interpolation`
  default: '`"not_a_knot"`'
pres_BC_type_edge:
  category:
  - profiles
  description:
  - Boundary condition at $s=1$ for the cubic spline interpolation of the pressure
    `pres(s)`
  type: '`string`'
  allowed_table:
  - *id005
  - - '`"1st_deriv"`'
    - Sets the first derivative at the boundary $s=1$, either to zero or to the provided
      second value of lnk_to_param(pres_BC_vals)
  - - '`"2nd_deriv"`'
    - Sets the second derivative at the boundary $s=0$, either to zero or to the provided
      second value of lnk_to_param(pres_BC_vals)
  required_if: lnk_to_param(pres_type) is `interpolation`
  default: '`"not_a_knot"`'
pres_BC_vals:
  category:
  - profiles
  description:
  - Values for the first / second derivative, at $s=0$ and $s=1$, for the cubic spline
    interpolation of the pressure `pres(s)`.
  type: array of `real` of size 2
  required_if: lnk_to_param(pres_type) is `interpolation` , and if lnk_to_param(pres_BC_type_axis)
    or lnk_to_param(pres_BC_type_edge) is different from `"not_a_knot"`
  default: '`(/0.0,0.0/))`'
pres_scale:
  category:
  - profiles
  description:
  - Scales the {proflong} `{prof}(s)` by a constant.
  - See profile definition lnk_to_param(pres_type)
  type: '`real`'
  default: '`1.0`'
